{"version":3,"file":"undef.js","sources":["../../presets/sparse-undefined.js","../../node_modules/typeson/dist/typeson-esm.js","../../presets/undef.js","../../types/undef.js"],"sourcesContent":["const sparseUndefined = [\n    {\n        sparseArrays: {\n            testPlainObjects: true,\n            test (x) { return Array.isArray(x); },\n            replace (a, stateObj) {\n                stateObj.iterateUnsetNumeric = true;\n                return a;\n            }\n        }\n    },\n    {\n        sparseUndefined: {\n            test (x, stateObj) {\n                return typeof x === 'undefined' && stateObj.ownKeys === false;\n            },\n            replace (n) { return 0; },\n            revive (s) { return undefined; } // Will avoid adding anything\n        }\n    }\n];\n\nexport default sparseUndefined;\n","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n/**\n* @callback TypesonFulfilled\n* @returns {Promise<any>|any}\n*/\n\n/**\n* @callback TypesonRejected\n* @returns {Promise<any>|any}\n*/\n\n/**\n * @callback TypesonResolve\n * @param {any} value\n * @returns {Promise<any>}\n */\n\n/**\n * @callback TypesonReject\n * @param {Error|any} error\n * @returns {Promise<any>}\n */\n\n/**\n * @callback TypesonResolveReject\n * @param {TypesonResolve} typesonResolve\n * @param {TypesonReject} typesonReject\n * @returns {Promise<any>}\n */\n\n/* eslint-disable block-spacing, space-before-function-paren,\n  space-before-blocks, space-infix-ops, semi, promise/avoid-new,\n  jsdoc/require-jsdoc */\n\n/**\n * We keep this function minimized so if using two instances of this\n *   library, where one is minimized and one is not, it will still work\n *   with `hasConstructorOf`.\n * With ES6 classes, we may be able to simply use `class TypesonPromise\n *   extends Promise` and add a string tag for detection.\n * @param {TypesonResolveReject} f\n */\nvar TypesonPromise = function TypesonPromise(f) {\n  _classCallCheck(this, TypesonPromise);\n\n  this.p = new Promise(f);\n};\n/* eslint-enable block-spacing, space-before-function-paren,\n  space-before-blocks, space-infix-ops, semi, promise/avoid-new,\n  jsdoc/require-jsdoc */\n// eslint-disable-next-line max-len\n// class TypesonPromise extends Promise {get[Symbol.toStringTag](){return 'TypesonPromise'};} // eslint-disable-line keyword-spacing, space-before-function-paren, space-before-blocks, block-spacing, semi\n\n\nTypesonPromise.__typeson__type__ = 'TypesonPromise'; // Note: core-js-bundle provides a `Symbol` polyfill\n\n/* istanbul ignore else */\n\nif (typeof Symbol !== 'undefined') {\n  // Ensure `isUserObject` will return `false` for `TypesonPromise`\n  TypesonPromise.prototype[Symbol.toStringTag] = 'TypesonPromise';\n}\n/**\n *\n * @param {TypesonFulfilled} [onFulfilled]\n * @param {TypesonRejected} [onRejected]\n * @returns {TypesonPromise}\n */\n\n\nTypesonPromise.prototype.then = function (onFulfilled, onRejected) {\n  var _this = this;\n\n  return new TypesonPromise(function (typesonResolve, typesonReject) {\n    // eslint-disable-next-line promise/catch-or-return\n    _this.p.then(function (res) {\n      // eslint-disable-next-line promise/always-return\n      typesonResolve(onFulfilled ? onFulfilled(res) : res);\n    })[\"catch\"](function (res) {\n      return onRejected ? onRejected(res) : Promise.reject(res);\n    }).then(typesonResolve, typesonReject);\n  });\n};\n/**\n *\n * @param {TypesonRejected} onRejected\n * @returns {TypesonPromise}\n */\n\n\nTypesonPromise.prototype[\"catch\"] = function (onRejected) {\n  return this.then(null, onRejected);\n};\n/**\n *\n * @param {any} v\n * @returns {TypesonPromise}\n */\n\n\nTypesonPromise.resolve = function (v) {\n  return new TypesonPromise(function (typesonResolve) {\n    typesonResolve(v);\n  });\n};\n/**\n *\n * @param {any} v\n * @returns {TypesonPromise}\n */\n\n\nTypesonPromise.reject = function (v) {\n  return new TypesonPromise(function (typesonResolve, typesonReject) {\n    typesonReject(v);\n  });\n};\n\n['all', 'race'].forEach(function (meth) {\n  /**\n   *\n   * @param {Promise<any>[]} promArr\n   * @returns {TypesonPromise}\n   */\n  TypesonPromise[meth] = function (promArr) {\n    return new TypesonPromise(function (typesonResolve, typesonReject) {\n      // eslint-disable-next-line promise/catch-or-return\n      Promise[meth](promArr.map(function (prom) {\n        return prom && prom.constructor && prom.constructor.__typeson__type__ === 'TypesonPromise' ? prom.p : prom;\n      })).then(typesonResolve, typesonReject);\n    });\n  };\n});\n\nvar _ref = {},\n    toStr = _ref.toString,\n    hasOwn$1 = {}.hasOwnProperty,\n    getProto = Object.getPrototypeOf,\n    fnToString = hasOwn$1.toString;\n/**\n * Second argument not in use internally, but provided for utility.\n * @param {any} v\n * @param {boolean} catchCheck\n * @returns {boolean}\n */\n\nfunction isThenable(v, catchCheck) {\n  return isObject(v) && typeof v.then === 'function' && (!catchCheck || typeof v[\"catch\"] === 'function');\n}\n/**\n *\n * @param {any} val\n * @returns {string}\n */\n\n\nfunction toStringTag(val) {\n  return toStr.call(val).slice(8, -1);\n}\n/**\n * This function is dependent on both constructors\n *   being identical so any minimization is expected of both.\n * @param {any} a\n * @param {GenericFunction} b\n * @returns {boolean}\n */\n\n\nfunction hasConstructorOf(a, b) {\n  if (!a || _typeof(a) !== 'object') {\n    return false;\n  }\n\n  var proto = getProto(a);\n\n  if (!proto) {\n    return b === null;\n  }\n\n  var Ctor = hasOwn$1.call(proto, 'constructor') && proto.constructor;\n\n  if (typeof Ctor !== 'function') {\n    return b === null;\n  }\n\n  if (b === Ctor) {\n    return true;\n  }\n\n  if (b !== null && fnToString.call(Ctor) === fnToString.call(b)) {\n    return true;\n  }\n\n  if (typeof b === 'function' && typeof Ctor.__typeson__type__ === 'string' && Ctor.__typeson__type__ === b.__typeson__type__) {\n    return true;\n  }\n\n  return false;\n}\n/**\n *\n * @param {any} val\n * @returns {boolean}\n */\n\n\nfunction isPlainObject(val) {\n  // Mirrors jQuery's\n  if (!val || toStringTag(val) !== 'Object') {\n    return false;\n  }\n\n  var proto = getProto(val);\n\n  if (!proto) {\n    // `Object.create(null)`\n    return true;\n  }\n\n  return hasConstructorOf(val, Object);\n}\n/**\n *\n * @param {any} val\n * @returns {boolean}\n */\n\n\nfunction isUserObject(val) {\n  if (!val || toStringTag(val) !== 'Object') {\n    return false;\n  }\n\n  var proto = getProto(val);\n\n  if (!proto) {\n    // `Object.create(null)`\n    return true;\n  }\n\n  return hasConstructorOf(val, Object) || isUserObject(proto);\n}\n/**\n *\n * @param {any} v\n * @returns {boolean}\n */\n\n\nfunction isObject(v) {\n  return v && _typeof(v) === 'object';\n}\n/**\n *\n * @param {string} keyPathComponent\n * @returns {string}\n */\n\n\nfunction escapeKeyPathComponent(keyPathComponent) {\n  return keyPathComponent.replace(/~/g, '~0').replace(/\\./g, '~1');\n}\n/**\n *\n * @param {string} keyPathComponent\n * @returns {string}\n */\n\n\nfunction unescapeKeyPathComponent(keyPathComponent) {\n  return keyPathComponent.replace(/~1/g, '.').replace(/~0/g, '~');\n}\n/**\n * @param {PlainObject|GenericArray} obj\n * @param {string} keyPath\n * @returns {any}\n */\n\n\nfunction getByKeyPath(obj, keyPath) {\n  if (keyPath === '') {\n    return obj;\n  }\n\n  var period = keyPath.indexOf('.');\n\n  if (period > -1) {\n    var innerObj = obj[unescapeKeyPathComponent(keyPath.slice(0, period))];\n    return innerObj === undefined ? undefined : getByKeyPath(innerObj, keyPath.slice(period + 1));\n  }\n\n  return obj[unescapeKeyPathComponent(keyPath)];\n}\n/**\n *\n * @param {PlainObject} obj\n * @param {string} keyPath\n * @param {any} value\n * @returns {any}\n */\n\n\nfunction setAtKeyPath(obj, keyPath, value) {\n  if (keyPath === '') {\n    return value;\n  }\n\n  var period = keyPath.indexOf('.');\n\n  if (period > -1) {\n    var innerObj = obj[unescapeKeyPathComponent(keyPath.slice(0, period))];\n    return setAtKeyPath(innerObj, keyPath.slice(period + 1), value);\n  }\n\n  obj[unescapeKeyPathComponent(keyPath)] = value;\n  return obj;\n}\n/**\n *\n * @param {external:JSON} value\n * @returns {\"null\"|\"array\"|\"undefined\"|\"boolean\"|\"number\"|\"string\"|\n *  \"object\"|\"symbol\"}\n */\n\n\nfunction getJSONType(value) {\n  return value === null ? 'null' : Array.isArray(value) ? 'array' : _typeof(value);\n}\n\nfunction _await(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nvar keys = Object.keys,\n    isArray = Array.isArray,\n    hasOwn = {}.hasOwnProperty,\n    internalStateObjPropsToIgnore = ['type', 'replaced', 'iterateIn', 'iterateUnsetNumeric'];\n/**\n * Handle plain object revivers first so reference setting can use\n * revived type (e.g., array instead of object); assumes revived\n * has same structure or will otherwise break subsequent references.\n * @param {PlainObjectType} a\n * @param {PlainObjectType} b\n * @returns {1|-1|boolean}\n */\n\nfunction _async(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n/**\n * @callback Tester\n * @param {any} value\n * @param {StateObject} stateobj\n * @returns {boolean}\n */\n\n/**\n* @callback Replacer\n* @param {any} value\n* @param {StateObject} stateObj\n* @returns {any} Should be JSON-stringifiable\n*/\n\n/**\n* @callback Reviver\n* @param {JSON} value\n* @param {StateObject} stateObj\n* @returns {any}\n*/\n\n/**\n* @typedef {PlainObject} TypesonOptions\n* @property {boolean} stringification Auto-set by `stringify`\n*/\n\n/**\n * An instance of this class can be used to call `stringify()` and `parse()`.\n * Typeson resolves cyclic references by default. Can also be extended to\n * support custom types using the register() method.\n *\n * @class\n * @param {{cyclic: boolean}} [options] - if cyclic (default true),\n *   cyclic references will be handled gracefully.\n */\n\n\nfunction _invoke(body, then) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(then);\n  }\n\n  return then(result);\n}\n\nfunction nestedPathsFirst(a, b) {\n  if (a.keypath === '') {\n    return -1;\n  }\n\n  var as = a.keypath.match(/\\./g) || 0;\n  var bs = b.keypath.match(/\\./g) || 0;\n\n  if (as) {\n    as = as.length;\n  }\n\n  if (bs) {\n    bs = bs.length;\n  }\n\n  return as > bs ? -1 : as < bs ? 1 : a.keypath < b.keypath ? -1 : a.keypath > b.keypath;\n}\n\nvar Typeson = /*#__PURE__*/function () {\n  /**\n   * @param {TypesonOptions} options\n   */\n  function Typeson(options) {\n    _classCallCheck(this, Typeson);\n\n    this.options = options; // Replacers signature: replace (value). Returns falsy if not\n    //   replacing. Otherwise ['Date', value.getTime()]\n\n    this.plainObjectReplacers = [];\n    this.nonplainObjectReplacers = []; // Revivers: [{type => reviver}, {plain: boolean}].\n    //   Sample: [{'Date': value => new Date(value)}, {plain: false}]\n\n    this.revivers = {};\n    /** Types registered via `register()`. */\n\n    this.types = {};\n  }\n  /**\n  * @typedef {null|boolean|number|string|GenericArray|PlainObject} JSON\n  */\n\n  /**\n  * @callback JSONReplacer\n  * @param {\"\"|string} key\n  * @param {JSON} value\n  * @returns {number|string|boolean|null|PlainObject|undefined}\n  * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The%20replacer%20parameter\n  */\n\n  /**\n   * Serialize given object to Typeson.\n   * Initial arguments work identical to those of `JSON.stringify`.\n   * The `replacer` argument has nothing to do with our replacers.\n   * @param {any} obj\n   * @param {JSONReplacer|string[]} replacer\n   * @param {number|string} space\n   * @param {TypesonOptions} opts\n   * @returns {string|Promise<string>} Promise resolves to a string\n   */\n\n\n  _createClass(Typeson, [{\n    key: \"stringify\",\n    value: function stringify(obj, replacer, space, opts) {\n      opts = _objectSpread2(_objectSpread2(_objectSpread2({}, this.options), opts), {}, {\n        stringification: true\n      });\n      var encapsulated = this.encapsulate(obj, null, opts);\n\n      if (isArray(encapsulated)) {\n        return JSON.stringify(encapsulated[0], replacer, space);\n      }\n\n      return encapsulated.then(function (res) {\n        return JSON.stringify(res, replacer, space);\n      });\n    }\n    /**\n     * Also sync but throws on non-sync result.\n     * @param {any} obj\n     * @param {JSONReplacer|string[]} replacer\n     * @param {number|string} space\n     * @param {TypesonOptions} opts\n     * @returns {string}\n     */\n\n  }, {\n    key: \"stringifySync\",\n    value: function stringifySync(obj, replacer, space, opts) {\n      return this.stringify(obj, replacer, space, _objectSpread2(_objectSpread2({\n        throwOnBadSyncType: true\n      }, opts), {}, {\n        sync: true\n      }));\n    }\n    /**\n     *\n     * @param {any} obj\n     * @param {JSONReplacer|string[]} replacer\n     * @param {number|string} space\n     * @param {TypesonOptions} opts\n     * @returns {Promise<string>}\n     */\n\n  }, {\n    key: \"stringifyAsync\",\n    value: function stringifyAsync(obj, replacer, space, opts) {\n      return this.stringify(obj, replacer, space, _objectSpread2(_objectSpread2({\n        throwOnBadSyncType: true\n      }, opts), {}, {\n        sync: false\n      }));\n    }\n    /**\n    * @callback JSONReviver\n    * @param {string} key\n    * @param {JSON} value\n    * @returns {JSON}\n    */\n\n    /**\n     * Parse Typeson back into an obejct.\n     * Initial arguments works identical to those of `JSON.parse()`.\n     * @param {string} text\n     * @param {JSONReviver} reviver This JSON reviver has nothing to do with\n     *   our revivers.\n     * @param {TypesonOptions} opts\n     * @returns {external:JSON}\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(text, reviver, opts) {\n      opts = _objectSpread2(_objectSpread2(_objectSpread2({}, this.options), opts), {}, {\n        parse: true\n      });\n      return this.revive(JSON.parse(text, reviver), opts);\n    }\n    /**\n    * Also sync but throws on non-sync result.\n    * @param {string} text\n    * @param {JSONReviver} reviver This JSON reviver has nothing to do with\n    *   our revivers.\n    * @param {TypesonOptions} opts\n    * @returns {external:JSON}\n    */\n\n  }, {\n    key: \"parseSync\",\n    value: function parseSync(text, reviver, opts) {\n      return this.parse(text, reviver, _objectSpread2(_objectSpread2({\n        throwOnBadSyncType: true\n      }, opts), {}, {\n        sync: true\n      }));\n    }\n    /**\n    * @param {string} text\n    * @param {JSONReviver} reviver This JSON reviver has nothing to do with\n    *   our revivers.\n    * @param {TypesonOptions} opts\n    * @returns {Promise<external:JSON>} Resolves to `external:JSON`\n    */\n\n  }, {\n    key: \"parseAsync\",\n    value: function parseAsync(text, reviver, opts) {\n      return this.parse(text, reviver, _objectSpread2(_objectSpread2({\n        throwOnBadSyncType: true\n      }, opts), {}, {\n        sync: false\n      }));\n    }\n    /**\n    * @typedef {} StateObject\n    */\n\n    /**\n     *\n     * @param {any} obj\n     * @param {StateObject} stateObj\n     * @param {TypesonOptions} [opts={}]\n     * @returns {string[]|false}\n     */\n\n  }, {\n    key: \"specialTypeNames\",\n    value: function specialTypeNames(obj, stateObj) {\n      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      opts.returnTypeNames = true;\n      return this.encapsulate(obj, stateObj, opts);\n    }\n    /**\n     *\n     * @param {any} obj\n     * @param {PlainObject} stateObj\n     * @param {PlainObject} [opts={}]\n     * @returns {Promise<any>|GenericArray|PlainObject|string|false}\n     */\n\n  }, {\n    key: \"rootTypeName\",\n    value: function rootTypeName(obj, stateObj) {\n      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      opts.iterateNone = true;\n      return this.encapsulate(obj, stateObj, opts);\n    }\n    /**\n     * Encapsulate a complex object into a plain Object by replacing\n     * registered types with plain objects representing the types data.\n     *\n     * This method is used internally by `Typeson.stringify()`.\n     * @param {any} obj - Object to encapsulate.\n     * @param {PlainObject} stateObj\n     * @param {PlainObject} opts\n     * @returns {Promise<any>|GenericArray|PlainObject|string|false}\n     */\n\n  }, {\n    key: \"encapsulate\",\n    value: function encapsulate(obj, stateObj, opts) {\n      /**\n       *\n       * @param {any} ret\n       * @param {GenericArray} promisesData\n       * @returns {Promise<any>}\n       */\n      var checkPromises = _async(function (ret, promisesData) {\n        return _await(Promise.all(promisesData.map(function (pd) {\n          return pd[1].p;\n        })), function (promResults) {\n          return _await(Promise.all(promResults.map(_async(function (promResult) {\n            var _exit = false;\n            var newPromisesData = [];\n\n            var _promisesData$splice = promisesData.splice(0, 1),\n                _promisesData$splice2 = _slicedToArray(_promisesData$splice, 1),\n                prData = _promisesData$splice2[0];\n\n            var _prData = _slicedToArray(prData, 7),\n                keyPath = _prData[0],\n                cyclic = _prData[2],\n                stateObj = _prData[3],\n                parentObj = _prData[4],\n                key = _prData[5],\n                detectedType = _prData[6];\n\n            var encaps = _encapsulate(keyPath, promResult, cyclic, stateObj, newPromisesData, true, detectedType);\n\n            var isTypesonPromise = hasConstructorOf(encaps, TypesonPromise); // Handle case where an embedded custom type itself\n            //   returns a `Typeson.Promise`\n\n            return _invoke(function () {\n              if (keyPath && isTypesonPromise) {\n                return _await(encaps.p, function (encaps2) {\n                  parentObj[key] = encaps2;\n                  _exit = true;\n                  return checkPromises(ret, newPromisesData);\n                });\n              }\n            }, function (_result) {\n              if (_exit) return _result;\n\n              if (keyPath) {\n                parentObj[key] = encaps;\n              } else if (isTypesonPromise) {\n                ret = encaps.p;\n              } else {\n                // If this is itself a `Typeson.Promise` (because the\n                //   original value supplied was a `Promise` or\n                //   because the supplied custom type value resolved\n                //   to one), returning it below will be fine since\n                //   a `Promise` is expected anyways given current\n                //   config (and if not a `Promise`, it will be ready\n                //   as the resolve value)\n                ret = encaps;\n              }\n\n              return checkPromises(ret, newPromisesData);\n            });\n          }))), function () {\n            return ret;\n          });\n        });\n      });\n      /**\n      * @typedef {PlainObject} OwnKeysObject\n      * @property {boolean} ownKeys\n      */\n\n      /**\n      * @callback BuiltinStateObjectPropertiesCallback\n      * @returns {void}\n      */\n\n      /**\n       *\n       * @param {StateObject} stateObj\n       * @param {OwnKeysObject} ownKeysObj\n       * @param {BuiltinStateObjectPropertiesCallback} cb\n       * @returns {undefined}\n       */\n\n\n      opts = _objectSpread2(_objectSpread2({\n        sync: true\n      }, this.options), opts);\n      var _opts = opts,\n          sync = _opts.sync;\n      var that = this,\n          types = {},\n          refObjs = [],\n          // For checking cyclic references\n      refKeys = [],\n          // For checking cyclic references\n      promisesDataRoot = []; // Clone the object deeply while at the same time replacing any\n      //   special types or cyclic reference:\n\n      var cyclic = 'cyclic' in opts ? opts.cyclic : true;\n      var _opts2 = opts,\n          encapsulateObserver = _opts2.encapsulateObserver;\n\n      var ret = _encapsulate('', obj, cyclic, stateObj || {}, promisesDataRoot);\n      /**\n       *\n       * @param {any} ret\n       * @returns {GenericArray|PlainObject|string|false}\n       */\n\n\n      function finish(ret) {\n        // Add `$types` to result only if we ever bumped into a\n        //  special type (or special case where object has own `$types`)\n        var typeNames = Object.values(types);\n\n        if (opts.iterateNone) {\n          if (typeNames.length) {\n            return typeNames[0];\n          }\n\n          return Typeson.getJSONType(ret);\n        }\n\n        if (typeNames.length) {\n          if (opts.returnTypeNames) {\n            return _toConsumableArray(new Set(typeNames));\n          } // Special if array (or a primitive) was serialized\n          //   because JSON would ignore custom `$types` prop on it\n\n\n          if (!ret || !isPlainObject(ret) || // Also need to handle if this is an object with its\n          //   own `$types` property (to avoid ambiguity)\n          hasOwn.call(ret, '$types')) {\n            ret = {\n              $: ret,\n              $types: {\n                $: types\n              }\n            };\n          } else {\n            ret.$types = types;\n          } // No special types\n\n        } else if (isObject(ret) && hasOwn.call(ret, '$types')) {\n          ret = {\n            $: ret,\n            $types: true\n          };\n        }\n\n        if (opts.returnTypeNames) {\n          return false;\n        }\n\n        return ret;\n      }\n\n      function _adaptBuiltinStateObjectProperties(stateObj, ownKeysObj, cb) {\n        Object.assign(stateObj, ownKeysObj);\n        var vals = internalStateObjPropsToIgnore.map(function (prop) {\n          var tmp = stateObj[prop];\n          delete stateObj[prop];\n          return tmp;\n        }); // eslint-disable-next-line node/callback-return\n\n        cb();\n        internalStateObjPropsToIgnore.forEach(function (prop, i) {\n          stateObj[prop] = vals[i];\n        });\n      }\n      /**\n       *\n       * @param {string} keypath\n       * @param {any} value\n       * @param {boolean} cyclic\n       * @param {PlainObject} stateObj\n       * @param {boolean} promisesData\n       * @param {boolean} resolvingTypesonPromise\n       * @param {string} detectedType\n       * @returns {any}\n       */\n\n\n      function _encapsulate(keypath, value, cyclic, stateObj, promisesData, resolvingTypesonPromise, detectedType) {\n        var ret;\n        var observerData = {};\n\n        var $typeof = _typeof(value);\n\n        var runObserver = encapsulateObserver ? function (obj) {\n          var type = detectedType || stateObj.type || Typeson.getJSONType(value);\n          encapsulateObserver(Object.assign(obj || observerData, {\n            keypath: keypath,\n            value: value,\n            cyclic: cyclic,\n            stateObj: stateObj,\n            promisesData: promisesData,\n            resolvingTypesonPromise: resolvingTypesonPromise,\n            awaitingTypesonPromise: hasConstructorOf(value, TypesonPromise)\n          }, {\n            type: type\n          }));\n        } : null;\n\n        if (['string', 'boolean', 'number', 'undefined'].includes($typeof)) {\n          if (value === undefined || Number.isNaN(value) || value === Number.NEGATIVE_INFINITY || value === Number.POSITIVE_INFINITY) {\n            ret = stateObj.replaced ? value : replace(keypath, value, stateObj, promisesData, false, resolvingTypesonPromise, runObserver);\n\n            if (ret !== value) {\n              observerData = {\n                replaced: ret\n              };\n            }\n          } else {\n            ret = value;\n          }\n\n          if (runObserver) {\n            runObserver();\n          }\n\n          return ret;\n        }\n\n        if (value === null) {\n          if (runObserver) {\n            runObserver();\n          }\n\n          return value;\n        }\n\n        if (cyclic && !stateObj.iterateIn && !stateObj.iterateUnsetNumeric && value && _typeof(value) === 'object') {\n          // Options set to detect cyclic references and be able\n          //   to rewrite them.\n          var refIndex = refObjs.indexOf(value);\n\n          if (refIndex < 0) {\n            if (cyclic === true) {\n              refObjs.push(value);\n              refKeys.push(keypath);\n            }\n          } else {\n            types[keypath] = '#';\n\n            if (runObserver) {\n              runObserver({\n                cyclicKeypath: refKeys[refIndex]\n              });\n            }\n\n            return '#' + refKeys[refIndex];\n          }\n        }\n\n        var isPlainObj = isPlainObject(value);\n        var isArr = isArray(value);\n        var replaced = // Running replace will cause infinite loop as will test\n        //   positive again\n        (isPlainObj || isArr) && (!that.plainObjectReplacers.length || stateObj.replaced) || stateObj.iterateIn ? // Optimization: if plain object and no plain-object\n        //   replacers, don't try finding a replacer\n        value : replace(keypath, value, stateObj, promisesData, isPlainObj || isArr, null, runObserver);\n        var clone;\n\n        if (replaced !== value) {\n          ret = replaced;\n          observerData = {\n            replaced: replaced\n          };\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (keypath === '' && hasConstructorOf(value, TypesonPromise)) {\n            promisesData.push([keypath, value, cyclic, stateObj, undefined, undefined, stateObj.type]);\n            ret = value;\n          } else if (isArr && stateObj.iterateIn !== 'object' || stateObj.iterateIn === 'array') {\n            // eslint-disable-next-line unicorn/no-new-array -- Sparse\n            clone = new Array(value.length);\n            observerData = {\n              clone: clone\n            };\n          } else if (!['function', 'symbol'].includes(_typeof(value)) && !('toJSON' in value) && !hasConstructorOf(value, TypesonPromise) && !hasConstructorOf(value, Promise) && !hasConstructorOf(value, ArrayBuffer) || isPlainObj || stateObj.iterateIn === 'object') {\n            clone = {};\n\n            if (stateObj.addLength) {\n              clone.length = value.length;\n            }\n\n            observerData = {\n              clone: clone\n            };\n          } else {\n            ret = value; // Only clone vanilla objects and arrays\n          }\n        }\n\n        if (runObserver) {\n          runObserver();\n        }\n\n        if (opts.iterateNone) {\n          return clone || ret;\n        }\n\n        if (!clone) {\n          return ret;\n        } // Iterate object or array\n\n\n        if (stateObj.iterateIn) {\n          var _loop = function _loop(key) {\n            var ownKeysObj = {\n              ownKeys: hasOwn.call(value, key)\n            };\n\n            _adaptBuiltinStateObjectProperties(stateObj, ownKeysObj, function () {\n              var kp = keypath + (keypath ? '.' : '') + escapeKeyPathComponent(key);\n\n              var val = _encapsulate(kp, value[key], Boolean(cyclic), stateObj, promisesData, resolvingTypesonPromise);\n\n              if (hasConstructorOf(val, TypesonPromise)) {\n                promisesData.push([kp, val, Boolean(cyclic), stateObj, clone, key, stateObj.type]);\n              } else if (val !== undefined) {\n                clone[key] = val;\n              }\n            });\n          };\n\n          // eslint-disable-next-line guard-for-in\n          for (var key in value) {\n            _loop(key);\n          }\n\n          if (runObserver) {\n            runObserver({\n              endIterateIn: true,\n              end: true\n            });\n          }\n        } else {\n          // Note: Non-indexes on arrays won't survive stringify so\n          //  somewhat wasteful for arrays, but so too is iterating\n          //  all numeric indexes on sparse arrays when not wanted\n          //  or filtering own keys for positive integers\n          keys(value).forEach(function (key) {\n            var kp = keypath + (keypath ? '.' : '') + escapeKeyPathComponent(key);\n            var ownKeysObj = {\n              ownKeys: true\n            };\n\n            _adaptBuiltinStateObjectProperties(stateObj, ownKeysObj, function () {\n              var val = _encapsulate(kp, value[key], Boolean(cyclic), stateObj, promisesData, resolvingTypesonPromise);\n\n              if (hasConstructorOf(val, TypesonPromise)) {\n                promisesData.push([kp, val, Boolean(cyclic), stateObj, clone, key, stateObj.type]);\n              } else if (val !== undefined) {\n                clone[key] = val;\n              }\n            });\n          });\n\n          if (runObserver) {\n            runObserver({\n              endIterateOwn: true,\n              end: true\n            });\n          }\n        } // Iterate array for non-own numeric properties (we can't\n        //   replace the prior loop though as it iterates non-integer\n        //   keys)\n\n\n        if (stateObj.iterateUnsetNumeric) {\n          var vl = value.length;\n\n          var _loop2 = function _loop2(i) {\n            if (!(i in value)) {\n              // No need to escape numeric\n              var kp = keypath + (keypath ? '.' : '') + i;\n              var ownKeysObj = {\n                ownKeys: false\n              };\n\n              _adaptBuiltinStateObjectProperties(stateObj, ownKeysObj, function () {\n                var val = _encapsulate(kp, undefined, Boolean(cyclic), stateObj, promisesData, resolvingTypesonPromise);\n\n                if (hasConstructorOf(val, TypesonPromise)) {\n                  promisesData.push([kp, val, Boolean(cyclic), stateObj, clone, i, stateObj.type]);\n                } else if (val !== undefined) {\n                  clone[i] = val;\n                }\n              });\n            }\n          };\n\n          for (var i = 0; i < vl; i++) {\n            _loop2(i);\n          }\n\n          if (runObserver) {\n            runObserver({\n              endIterateUnsetNumeric: true,\n              end: true\n            });\n          }\n        }\n\n        return clone;\n      }\n      /**\n      * @typedef {PlainObject} KeyPathEvent\n      * @property {string} cyclicKeypath\n      */\n\n      /**\n      * @typedef {PlainObject} EndIterateInEvent\n      * @property {boolean} endIterateIn\n      * @property {boolean} end\n      */\n\n      /**\n      * @typedef {PlainObject} EndIterateUnsetNumericEvent\n      * @property {boolean} endIterateUnsetNumeric\n      * @property {boolean} end\n      */\n\n      /**\n      * @typedef {PlainObject} TypeDetectedEvent\n      * @property {boolean} typeDetected\n      */\n\n      /**\n      * @typedef {PlainObject} ReplacingEvent\n      * @property {boolean} replacing\n      */\n\n      /**\n      * @callback Observer\n      * @param {KeyPathEvent|EndIterateInEvent|EndIterateUnsetNumericEvent|\n      * TypeDetectedEvent|ReplacingEvent} [event]\n      * @returns {void}\n      */\n\n      /**\n       *\n       * @param {string} keypath\n       * @param {any} value\n       * @param {PlainObject} stateObj\n       * @param {GenericArray} promisesData\n       * @param {boolean} plainObject\n       * @param {boolean} resolvingTypesonPromise\n       * @param {Observer} [runObserver]\n       * @returns {any}\n       */\n\n\n      function replace(keypath, value, stateObj, promisesData, plainObject, resolvingTypesonPromise, runObserver) {\n        // Encapsulate registered types\n        var replacers = plainObject ? that.plainObjectReplacers : that.nonplainObjectReplacers;\n        var i = replacers.length;\n\n        while (i--) {\n          var replacer = replacers[i];\n\n          if (replacer.test(value, stateObj)) {\n            var type = replacer.type;\n\n            if (that.revivers[type]) {\n              // Record the type only if a corresponding reviver\n              //   exists. This is to support specs where only\n              //   replacement is done.\n              // For example, ensuring deep cloning of the object,\n              //   or replacing a type to its equivalent without\n              //   the need to revive it.\n              var existing = types[keypath]; // type can comprise an array of types (see test\n              //   \"should support intermediate types\")\n\n              types[keypath] = existing ? [type].concat(existing) : type;\n            }\n\n            Object.assign(stateObj, {\n              type: type,\n              replaced: true\n            });\n\n            if ((sync || !replacer.replaceAsync) && !replacer.replace) {\n              if (runObserver) {\n                runObserver({\n                  typeDetected: true\n                });\n              }\n\n              return _encapsulate(keypath, value, cyclic && 'readonly', stateObj, promisesData, resolvingTypesonPromise, type);\n            }\n\n            if (runObserver) {\n              runObserver({\n                replacing: true\n              });\n            } // Now, also traverse the result in case it contains its\n            //   own types to replace\n\n\n            var replaceMethod = sync || !replacer.replaceAsync ? 'replace' : 'replaceAsync';\n            return _encapsulate(keypath, replacer[replaceMethod](value, stateObj), cyclic && 'readonly', stateObj, promisesData, resolvingTypesonPromise, type);\n          }\n        }\n\n        return value;\n      }\n\n      return promisesDataRoot.length ? sync && opts.throwOnBadSyncType ? function () {\n        throw new TypeError('Sync method requested but async result obtained');\n      }() : Promise.resolve(checkPromises(ret, promisesDataRoot)).then(finish) : !sync && opts.throwOnBadSyncType ? function () {\n        throw new TypeError('Async method requested but sync result obtained');\n      }() // If this is a synchronous request for stringification, yet\n      //   a promise is the result, we don't want to resolve leading\n      //   to an async result, so we return an array to avoid\n      //   ambiguity\n      : opts.stringification && sync ? [finish(ret)] : sync ? finish(ret) : Promise.resolve(finish(ret));\n    }\n    /**\n     * Also sync but throws on non-sync result.\n     * @param {any} obj\n     * @param {StateObject} stateObj\n     * @param {TypesonOptions} opts\n     * @returns {any}\n     */\n\n  }, {\n    key: \"encapsulateSync\",\n    value: function encapsulateSync(obj, stateObj, opts) {\n      return this.encapsulate(obj, stateObj, _objectSpread2(_objectSpread2({\n        throwOnBadSyncType: true\n      }, opts), {}, {\n        sync: true\n      }));\n    }\n    /**\n     * @param {any} obj\n     * @param {StateObject} stateObj\n     * @param {TypesonOptions} opts\n     * @returns {any}\n     */\n\n  }, {\n    key: \"encapsulateAsync\",\n    value: function encapsulateAsync(obj, stateObj, opts) {\n      return this.encapsulate(obj, stateObj, _objectSpread2(_objectSpread2({\n        throwOnBadSyncType: true\n      }, opts), {}, {\n        sync: false\n      }));\n    }\n    /**\n     * Revive an encapsulated object.\n     * This method is used internally by `Typeson.parse()`.\n     * @param {PlainObject} obj - Object to revive. If it has `$types` member,\n     *   the properties that are listed there will be replaced with its true\n     *   type instead of just plain objects.\n     * @param {TypesonOptions} opts\n     * @throws TypeError If mismatch between sync/async type and result\n     * @returns {Promise<any>|any} If async, returns a Promise that resolves\n     * to `any`.\n     */\n\n  }, {\n    key: \"revive\",\n    value: function revive(obj, opts) {\n      var types = obj && obj.$types; // No type info added. Revival not needed.\n\n      if (!types) {\n        return obj;\n      } // Object happened to have own `$types` property but with\n      //   no actual types, so we unescape and return that object\n\n\n      if (types === true) {\n        return obj.$;\n      }\n\n      opts = _objectSpread2(_objectSpread2({\n        sync: true\n      }, this.options), opts);\n      var _opts3 = opts,\n          sync = _opts3.sync;\n      var keyPathResolutions = [];\n      var stateObj = {};\n      var ignore$Types = true; // Special when root object is not a trivial Object, it will\n      //   be encapsulated in `$`. It will also be encapsulated in\n      //   `$` if it has its own `$` property to avoid ambiguity\n\n      if (types.$ && isPlainObject(types.$)) {\n        obj = obj.$;\n        types = types.$;\n        ignore$Types = false;\n      }\n\n      var that = this;\n      /**\n       * @callback RevivalReducer\n       * @param {any} value\n       * @param {string} type\n       * @returns {any}\n       */\n\n      /**\n       *\n       * @param {string} type\n       * @param {any} val\n       * @throws {Error}\n       * @returns {any}\n       */\n\n      function executeReviver(type, val) {\n        var _ref = that.revivers[type] || [],\n            _ref2 = _slicedToArray(_ref, 1),\n            reviver = _ref2[0];\n\n        if (!reviver) {\n          throw new Error('Unregistered type: ' + type);\n        } // Only `sync` expected here, as problematic async would\n        //  be missing both `reviver` and `reviverAsync`, and\n        //  encapsulation shouldn't have added types, so\n        //  should have made an early exit\n\n\n        if (sync && !('revive' in reviver)) {\n          // Just return value as is\n          return val;\n        }\n\n        return reviver[sync && reviver.revive ? 'revive' : !sync && reviver.reviveAsync ? 'reviveAsync' : 'revive'](val, stateObj);\n      }\n      /**\n       *\n       * @returns {void|TypesonPromise<void>}\n       */\n\n\n      function revivePlainObjects() {\n        // const references = [];\n        // const reviveTypes = [];\n        var plainObjectTypes = [];\n        Object.entries(types).forEach(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n              keypath = _ref4[0],\n              type = _ref4[1];\n\n          if (type === '#') {\n            /*\n            references.push({\n                keypath,\n                reference: getByKeyPath(obj, keypath)\n            });\n            */\n            return;\n          }\n\n          [].concat(type).forEach(function (type) {\n            var _ref5 = that.revivers[type] || [null, {}],\n                _ref6 = _slicedToArray(_ref5, 2),\n                plain = _ref6[1].plain;\n\n            if (!plain) {\n              // reviveTypes.push({keypath, type});\n              return;\n            }\n\n            plainObjectTypes.push({\n              keypath: keypath,\n              type: type\n            });\n            delete types[keypath]; // Avoid repeating\n          });\n        });\n\n        if (!plainObjectTypes.length) {\n          return undefined;\n        } // console.log(plainObjectTypes.sort(nestedPathsFirst));\n\n        /**\n        * @typedef {PlainObject} PlainObjectType\n        * @property {string} keypath\n        * @property {string} type\n        */\n\n\n        return plainObjectTypes.sort(nestedPathsFirst).reduce(function reducer(possibleTypesonPromise, _ref7) {\n          var keypath = _ref7.keypath,\n              type = _ref7.type;\n\n          if (isThenable(possibleTypesonPromise)) {\n            return possibleTypesonPromise.then(function (val) {\n              return reducer(val, {\n                keypath: keypath,\n                type: type\n              });\n            });\n          } // console.log('obj', JSON.stringify(keypath), obj);\n\n\n          var val = getByKeyPath(obj, keypath);\n          val = executeReviver(type, val);\n\n          if (hasConstructorOf(val, TypesonPromise)) {\n            return val.then(function (v) {\n              var newVal = setAtKeyPath(obj, keypath, v);\n\n              if (newVal === v) {\n                obj = newVal;\n              }\n\n              return undefined;\n            });\n          }\n\n          var newVal = setAtKeyPath(obj, keypath, val);\n\n          if (newVal === val) {\n            obj = newVal;\n          }\n\n          return undefined;\n        }, undefined // This argument must be explicit\n        ); // references.forEach(({keypath, reference}) => {});\n        // reviveTypes.sort(nestedPathsFirst).forEach(() => {});\n      }\n\n      var revivalPromises = [];\n      /**\n       *\n       * @param {string} keypath\n       * @param {any} value\n       * @param {?(GenericArray|PlainObject)} target\n       * @param {GenericArray|PlainObject} [clone]\n       * @param {string} [key]\n       * @returns {any}\n       */\n\n      function _revive(keypath, value, target, clone, key) {\n        if (ignore$Types && keypath === '$types') {\n          return undefined;\n        }\n\n        var type = types[keypath];\n        var isArr = isArray(value);\n\n        if (isArr || isPlainObject(value)) {\n          // eslint-disable-next-line unicorn/no-new-array -- Sparse\n          var _clone = isArr ? new Array(value.length) : {}; // Iterate object or array\n\n\n          keys(value).forEach(function (k) {\n            var val = _revive(keypath + (keypath ? '.' : '') + escapeKeyPathComponent(k), value[k], target || _clone, _clone, k);\n\n            var set = function set(v) {\n              if (hasConstructorOf(v, Undefined)) {\n                _clone[k] = undefined;\n              } else if (v !== undefined) {\n                _clone[k] = v;\n              }\n\n              return v;\n            };\n\n            if (hasConstructorOf(val, TypesonPromise)) {\n              revivalPromises.push(val.then(function (ret) {\n                return set(ret);\n              }));\n            } else {\n              set(val);\n            }\n          });\n          value = _clone; // Try to resolve cyclic reference as soon as available\n\n          while (keyPathResolutions.length) {\n            var _keyPathResolutions$ = _slicedToArray(keyPathResolutions[0], 4),\n                _target = _keyPathResolutions$[0],\n                keyPath = _keyPathResolutions$[1],\n                _clone2 = _keyPathResolutions$[2],\n                k = _keyPathResolutions$[3];\n\n            var val = getByKeyPath(_target, keyPath); // Typeson.Undefined not expected here as not cyclic or\n            //   `undefined`\n\n            if (val !== undefined) {\n              _clone2[k] = val;\n            } else {\n              break;\n            }\n\n            keyPathResolutions.splice(0, 1);\n          }\n        }\n\n        if (!type) {\n          return value;\n        }\n\n        if (type === '#') {\n          var _ret = getByKeyPath(target, value.slice(1));\n\n          if (_ret === undefined) {\n            // Cyclic reference not yet available\n            keyPathResolutions.push([target, value.slice(1), clone, key]);\n          }\n\n          return _ret;\n        } // `type` can be an array here\n\n\n        return [].concat(type).reduce(function reducer(val, typ) {\n          if (hasConstructorOf(val, TypesonPromise)) {\n            return val.then(function (v) {\n              // TypesonPromise here too\n              return reducer(v, typ);\n            });\n          }\n\n          return executeReviver(typ, val);\n        }, value);\n      }\n      /**\n       *\n       * @param {any} retrn\n       * @returns {undefined|any}\n       */\n\n\n      function checkUndefined(retrn) {\n        return hasConstructorOf(retrn, Undefined) ? undefined : retrn;\n      }\n\n      var possibleTypesonPromise = revivePlainObjects();\n      var ret;\n\n      if (hasConstructorOf(possibleTypesonPromise, TypesonPromise)) {\n        ret = possibleTypesonPromise.then(function () {\n          return obj;\n        });\n      } else {\n        ret = _revive('', obj, null);\n\n        if (revivalPromises.length) {\n          // Ensure children resolved\n          ret = TypesonPromise.resolve(ret).then(function (r) {\n            return TypesonPromise.all([// May be a TypesonPromise or not\n            r].concat(revivalPromises));\n          }).then(function (_ref8) {\n            var _ref9 = _slicedToArray(_ref8, 1),\n                r = _ref9[0];\n\n            return r;\n          });\n        }\n      }\n\n      return isThenable(ret) ? sync && opts.throwOnBadSyncType ? function () {\n        throw new TypeError('Sync method requested but async result obtained');\n      }() : hasConstructorOf(ret, TypesonPromise) ? ret.p.then(checkUndefined) : ret : !sync && opts.throwOnBadSyncType ? function () {\n        throw new TypeError('Async method requested but sync result obtained');\n      }() : sync ? checkUndefined(ret) : Promise.resolve(checkUndefined(ret));\n    }\n    /**\n     * Also sync but throws on non-sync result.\n     * @param {any} obj\n     * @param {TypesonOptions} opts\n     * @returns {any}\n     */\n\n  }, {\n    key: \"reviveSync\",\n    value: function reviveSync(obj, opts) {\n      return this.revive(obj, _objectSpread2(_objectSpread2({\n        throwOnBadSyncType: true\n      }, opts), {}, {\n        sync: true\n      }));\n    }\n    /**\n    * @param {any} obj\n    * @param {TypesonOptions} opts\n    * @returns {Promise<any>}\n    */\n\n  }, {\n    key: \"reviveAsync\",\n    value: function reviveAsync(obj, opts) {\n      return this.revive(obj, _objectSpread2(_objectSpread2({\n        throwOnBadSyncType: true\n      }, opts), {}, {\n        sync: false\n      }));\n    }\n    /**\n    * @typedef {Tester|Replacer|Reviver} Spec\n    */\n\n    /**\n     * Register types.\n     * For examples on how to use this method, see\n     *   {@link https://github.com/dfahlander/typeson-registry/tree/master/types}.\n     * @param {object<string,Spec[]>[]} typeSpecSets -\n     * Types and their functions [test, encapsulate, revive];\n     * @param {TypesonOptions} opts\n     * @returns {Typeson}\n     */\n\n  }, {\n    key: \"register\",\n    value: function register(typeSpecSets, opts) {\n      opts = opts || {};\n      [].concat(typeSpecSets).forEach(function R(typeSpec) {\n        var _this = this;\n\n        // Allow arrays of arrays of arrays...\n        if (isArray(typeSpec)) {\n          return typeSpec.map(function (typSpec) {\n            return R.call(_this, typSpec);\n          });\n        }\n\n        typeSpec && keys(typeSpec).forEach(function (typeId) {\n          if (typeId === '#') {\n            throw new TypeError('# cannot be used as a type name as it is reserved ' + 'for cyclic objects');\n          } else if (Typeson.JSON_TYPES.includes(typeId)) {\n            throw new TypeError('Plain JSON object types are reserved as type names');\n          }\n\n          var spec = typeSpec[typeId];\n          var replacers = spec && spec.testPlainObjects ? this.plainObjectReplacers : this.nonplainObjectReplacers;\n          var existingReplacer = replacers.filter(function (r) {\n            return r.type === typeId;\n          });\n\n          if (existingReplacer.length) {\n            // Remove existing spec and replace with this one.\n            replacers.splice(replacers.indexOf(existingReplacer[0]), 1);\n            delete this.revivers[typeId];\n            delete this.types[typeId];\n          }\n\n          if (typeof spec === 'function') {\n            // Support registering just a class without replacer/reviver\n            var Class = spec;\n            spec = {\n              test: function test(x) {\n                return x && x.constructor === Class;\n              },\n              replace: function replace(x) {\n                return _objectSpread2({}, x);\n              },\n              revive: function revive(x) {\n                return Object.assign(Object.create(Class.prototype), x);\n              }\n            };\n          } else if (isArray(spec)) {\n            var _spec = spec,\n                _spec2 = _slicedToArray(_spec, 3),\n                test = _spec2[0],\n                replace = _spec2[1],\n                revive = _spec2[2];\n\n            spec = {\n              test: test,\n              replace: replace,\n              revive: revive\n            };\n          }\n\n          if (!spec || !spec.test) {\n            return;\n          }\n\n          var replacerObj = {\n            type: typeId,\n            test: spec.test.bind(spec)\n          };\n\n          if (spec.replace) {\n            replacerObj.replace = spec.replace.bind(spec);\n          }\n\n          if (spec.replaceAsync) {\n            replacerObj.replaceAsync = spec.replaceAsync.bind(spec);\n          }\n\n          var start = typeof opts.fallback === 'number' ? opts.fallback : opts.fallback ? 0 : Number.POSITIVE_INFINITY;\n\n          if (spec.testPlainObjects) {\n            this.plainObjectReplacers.splice(start, 0, replacerObj);\n          } else {\n            this.nonplainObjectReplacers.splice(start, 0, replacerObj);\n          } // Todo: We might consider a testAsync type\n\n\n          if (spec.revive || spec.reviveAsync) {\n            var reviverObj = {};\n\n            if (spec.revive) {\n              reviverObj.revive = spec.revive.bind(spec);\n            }\n\n            if (spec.reviveAsync) {\n              reviverObj.reviveAsync = spec.reviveAsync.bind(spec);\n            }\n\n            this.revivers[typeId] = [reviverObj, {\n              plain: spec.testPlainObjects\n            }];\n          } // Record to be retrieved via public types property.\n\n\n          this.types[typeId] = spec;\n        }, this);\n      }, this);\n      return this;\n    }\n  }]);\n\n  return Typeson;\n}();\n/**\n * We keep this function minimized so if using two instances of this\n * library, where one is minimized and one is not, it will still work\n * with `hasConstructorOf`.\n * @class\n */\n\n\nvar Undefined = function Undefined() {\n  _classCallCheck(this, Undefined);\n}; // eslint-disable-line space-before-blocks\n\n\nUndefined.__typeson__type__ = 'TypesonUndefined'; // The following provide classes meant to avoid clashes with other values\n// To insist `undefined` should be added\n\nTypeson.Undefined = Undefined; // To support async encapsulation/stringification\n\nTypeson.Promise = TypesonPromise; // Some fundamental type-checking utilities\n\nTypeson.isThenable = isThenable;\nTypeson.toStringTag = toStringTag;\nTypeson.hasConstructorOf = hasConstructorOf;\nTypeson.isObject = isObject;\nTypeson.isPlainObject = isPlainObject;\nTypeson.isUserObject = isUserObject;\nTypeson.escapeKeyPathComponent = escapeKeyPathComponent;\nTypeson.unescapeKeyPathComponent = unescapeKeyPathComponent;\nTypeson.getByKeyPath = getByKeyPath;\nTypeson.getJSONType = getJSONType;\nTypeson.JSON_TYPES = ['null', 'boolean', 'number', 'string', 'array', 'object'];\n\nexport default Typeson;\n","import sparseUndefined from './sparse-undefined.js';\nimport undf from '../types/undef.js';\n\nconst undef = [\n    sparseUndefined,\n    undf\n];\n\nexport default undef;\n","// This does not preserve `undefined` in sparse arrays; see the `undefined`\n//  or `sparse-undefined` preset\nimport Typeson from 'typeson';\n\nconst undef = {\n    undef: {\n        test (x, stateObj) {\n            return typeof x === 'undefined' &&\n                (stateObj.ownKeys || !('ownKeys' in stateObj));\n        },\n        replace (n) { return 0; },\n        revive (s) {\n            // Will add `undefined` (returning `undefined` would instead\n            //   avoid explicitly setting)\n            return new Typeson.Undefined();\n        }\n    }\n};\n\nexport default undef;\n"],"names":["sparseUndefined","sparseArrays","testPlainObjects","test","x","Array","isArray","replace","a","stateObj","iterateUnsetNumeric","ownKeys","n","revive","s","_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_defineProperty","value","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","_unsupportedIterableToArray","_nonIterableRest","_toConsumableArray","_arrayWithoutHoles","_arrayLikeToArray","_iterableToArray","iter","from","_nonIterableSpread","o","minLen","toString","call","slice","name","len","arr2","TypesonPromise","f","this","p","Promise","__typeson__type__","toStringTag","then","onFulfilled","onRejected","_this","typesonResolve","typesonReject","res","reject","resolve","v","meth","promArr","map","prom","toStr","hasOwn$1","hasOwnProperty","getProto","getPrototypeOf","fnToString","isThenable","catchCheck","isObject","val","hasConstructorOf","b","proto","Ctor","isPlainObject","escapeKeyPathComponent","keyPathComponent","unescapeKeyPathComponent","getByKeyPath","keyPath","period","indexOf","innerObj","setAtKeyPath","_await","direct","hasOwn","internalStateObjPropsToIgnore","_async","args","e","nestedPathsFirst","keypath","as","match","bs","Typeson","options","plainObjectReplacers","nonplainObjectReplacers","revivers","types","_createClass","protoProps","staticProps","stringify","replacer","space","opts","stringification","encapsulated","encapsulate","JSON","stringifySync","throwOnBadSyncType","sync","stringifyAsync","parse","text","reviver","parseSync","parseAsync","specialTypeNames","returnTypeNames","rootTypeName","iterateNone","checkPromises","ret","promisesData","all","pd","promResults","promResult","_exit","newPromisesData","_promisesData$splice2","splice","_prData","cyclic","parentObj","detectedType","encaps","_encapsulate","isTypesonPromise","_invoke","body","result","encaps2","_result","that","refObjs","refKeys","promisesDataRoot","encapsulateObserver","finish","typeNames","values","getJSONType","Set","$types","$","_adaptBuiltinStateObjectProperties","ownKeysObj","cb","assign","vals","prop","tmp","resolvingTypesonPromise","observerData","$typeof","runObserver","type","awaitingTypesonPromise","includes","Number","isNaN","NEGATIVE_INFINITY","POSITIVE_INFINITY","replaced","iterateIn","refIndex","cyclicKeypath","clone","isPlainObj","isArr","ArrayBuffer","addLength","_loop","kp","Boolean","endIterateIn","end","endIterateOwn","vl","_loop2","endIterateUnsetNumeric","plainObject","replacers","existing","concat","replaceAsync","replacing","typeDetected","encapsulateSync","encapsulateAsync","keyPathResolutions","ignore$Types","executeReviver","Error","reviveAsync","revivalPromises","checkUndefined","retrn","Undefined","possibleTypesonPromise","revivePlainObjects","plainObjectTypes","entries","_ref3","_ref4","plain","sort","reduce","reducer","_ref7","newVal","_revive","_clone","k","set","_keyPathResolutions$","_target","_clone2","_ret","typ","r","_ref8","reviveSync","register","typeSpecSets","R","typeSpec","typSpec","typeId","JSON_TYPES","spec","existingReplacer","Class","create","_spec2","replacerObj","bind","start","fallback","reviverObj","isUserObject","undef"],"mappings":"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"}