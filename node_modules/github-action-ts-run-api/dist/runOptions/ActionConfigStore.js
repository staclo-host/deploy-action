"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionConfigStore = void 0;
const ActionConfigInterface_1 = require("../types/ActionConfigInterface");
const jsonschema_1 = require("jsonschema");
const InputsStore_1 = require("./InputsStore");
const yaml = __importStar(require("yaml"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const realistic_structured_clone_1 = __importDefault(require("realistic-structured-clone"));
const assert_1 = __importDefault(require("assert"));
const DeprecatedNodeVersionWarning_1 = require("../runResult/warnings/DeprecatedNodeVersionWarning");
const actionConfigSchema = require("../../declarations/github-action-config-schema.json");
class ActionConfigStore {
    constructor(_data) {
        this._data = _data;
    }
    static create(configSource, required) {
        if (required) {
            (0, assert_1.default)(configSource !== undefined, 'Action config should be set using path to action.yml file or config object');
        }
        else if (configSource === undefined) {
            return ActionConfigStore.empty();
        }
        return typeof configSource === 'string'
            ? ActionConfigStore.fromFile(configSource)
            : ActionConfigStore.fromObject(configSource);
    }
    static fromFile(filePath) {
        let config;
        try {
            config = yaml.parse((fs_extra_1.default.readFileSync(filePath)).toString());
        }
        catch (err) {
            throw new Error("Can't read and parse action.yml. " + err);
        }
        return ActionConfigStore.fromObject(config);
    }
    static fromObject(config) {
        const validator = new jsonschema_1.Validator();
        const result = validator.validate(config, actionConfigSchema);
        if (!result.valid) {
            const errors = result.errors.map(error => error.stack).join("\n");
            throw new Error('Error validating action config. ' + errors);
        }
        return new ActionConfigStore(config);
    }
    static empty() {
        return new ActionConfigStore(undefined);
    }
    isEmpty() {
        return this._data === undefined;
    }
    clone() {
        return new ActionConfigStore((0, realistic_structured_clone_1.default)(this._data));
    }
    get data() {
        return this._data;
    }
    getDefaultInputs() {
        if (this._data && this._data.inputs) {
            return new InputsStore_1.InputsStore(Object.fromEntries(
            // return empty string for inputs without default value to correspond GitHub Runners behaviour:
            // https://github.com/actions/runner/issues/924
            Object.entries(this._data.inputs)
                .map(entry => entry[1].default !== undefined
                ? [entry[0], entry[1].default]
                : [entry[0], ""])));
        }
        return new InputsStore_1.InputsStore();
    }
    getWarnings() {
        const warnings = [];
        if (this._data && this._data.runs.using === ActionConfigInterface_1.ActionRunsUsingNode12) {
            warnings.push(new DeprecatedNodeVersionWarning_1.DeprecatedNodeVersionWarning('Node.js 12 actions are deprecated. For more information see: ' +
                'https://github.blog/changelog/2022-09-22-github-actions-all-actions-will-begin-running-on-node16-instead-of-node12/.', '12'));
        }
        if (this._data && this._data.runs.using === ActionConfigInterface_1.ActionRunsUsingNode16) {
            warnings.push(new DeprecatedNodeVersionWarning_1.DeprecatedNodeVersionWarning('Node.js 16 actions are deprecated. For more information see: ' +
                'https://github.blog/changelog/2023-09-22-github-actions-transitioning-from-node-16-to-node-20/.', '16'));
        }
        return warnings;
    }
}
exports.ActionConfigStore = ActionConfigStore;
//# sourceMappingURL=ActionConfigStore.js.map