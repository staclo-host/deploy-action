"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RunOptions = void 0;
const EnvStore_1 = require("./EnvStore");
const InputsStore_1 = require("./InputsStore");
const StateStore_1 = require("./StateStore");
const GithubContextStore_1 = require("./GithubContextStore");
const GithubServiceEnvStore_1 = require("./GithubServiceEnvStore");
const FakeFsOptionsStore_1 = require("./FakeFsOptionsStore");
const OutputOptionsStore_1 = require("./OutputOptionsStore");
/**
 * Read more in docs/run-options.md
 */
class RunOptions {
    static create(init = {}) {
        const defaultFakeFsOptions = {
            tmpRootDir: undefined,
            fakeCommandFiles: true,
            rmFakedTempDirAfterRun: true,
            rmFakedWorkspaceDirAfterRun: true
        };
        const defaultOutputHandlingOptions = {
            parseStdoutCommands: true,
            parseStderrCommands: true,
            printStderr: true,
            printStdout: true,
            stdoutTransform: undefined,
            stderrTransform: undefined,
            printRunnerDebug: false,
            printRunnerWarnings: true
        };
        return new RunOptions(new InputsStore_1.InputsStore(init.inputs || {}), new EnvStore_1.EnvStore(init.env || {}), new StateStore_1.StateStore(init.state || {}), new GithubContextStore_1.GithubContextStore(init.githubContext || {}), new GithubServiceEnvStore_1.GithubServiceEnvStore(init.githubServiceEnv || {}), (new FakeFsOptionsStore_1.FakeFsOptionsStore(defaultFakeFsOptions)).apply(init.fakeFsOptions || {}), (new OutputOptionsStore_1.OutputOptionsStore(defaultOutputHandlingOptions)).apply(init.outputOptions || {}), init.shouldAddProcessEnv, init.shouldFakeMinimalGithubRunnerEnv !== undefined ? init.shouldFakeMinimalGithubRunnerEnv : true, init.workingDir, init.workspaceDir, init.tempDir, init.timeoutMs);
    }
    constructor(inputs, env, state, githubContext, githubServiceEnv, fakeFsOptions, outputOptions, shouldAddProcessEnv, shouldFakeMinimalGithubRunnerEnv, workingDir, workspaceDir, tempDir, timeoutMs) {
        this.inputs = inputs;
        this.env = env;
        this.state = state;
        this.githubContext = githubContext;
        this.githubServiceEnv = githubServiceEnv;
        this.fakeFsOptions = fakeFsOptions;
        this.outputOptions = outputOptions;
        this.shouldAddProcessEnv = shouldAddProcessEnv;
        this.shouldFakeMinimalGithubRunnerEnv = shouldFakeMinimalGithubRunnerEnv;
        this.workingDir = workingDir;
        this.workspaceDir = workspaceDir;
        this.tempDir = tempDir;
        this.timeoutMs = timeoutMs;
    }
    /**
     * @description Specify a set of string environment variables
     * (https://docs.github.com/en/actions/learn-github-actions/environment-variables) that will be
     * set for action run.
     * It's an analog of `env` section in a workflow. Doesn't override `setGithubContext()` and `setGithubServiceEnv()`
     * in options object, but will be merged with other service env variables at action run.
     */
    setEnv(env, update = true) {
        update ? this.env.apply(env) : this.env.setData(env);
        return this;
    }
    /**
     * @description
     * `true`: add current process env variables to action env
     * `false`: do not add
     * _default_ `undefined`: do not add, except the case of JS file target if debugger is attached
     * (to enable you debugging a child proc).
     *
     * Doesn't override env variables in options object, but will be merged with all service env variables at
     * action run.
     */
    setShouldAddProcessEnv(shouldAdd) {
        this.shouldAddProcessEnv = shouldAdd;
        return this;
    }
    setFakeFsOptions(options, update = true) {
        update ? this.fakeFsOptions.apply(options) : this.fakeFsOptions.setData(options);
        return this;
    }
    /**
     * @description Specify a set of string inputs that will be mapped to the correspondent `INPUT_` env variables at the time
     * of action execution. It's an analog of `with` section in a workflow.
     * If your want to have default input values from `action.yml`, pass its path to the target factory.
     */
    setInputs(inputsUpdate, update = true) {
        update ? this.inputs.apply(inputsUpdate) : this.inputs.setData(inputsUpdate);
        return this;
    }
    /**
     * @description Specify a set of
     * saved state
     * (https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#sending-values-to-the-pre-and-post-actions)
     * values that will be mapped to `STATE_` env variables at action run.
     *
     * Can be used to pass values from `result.commands.savedState` of _main_ script run to `post` scripts run.
     */
    setState(state, update = true) {
        update ? this.state.apply(state) : this.state.setData(state);
        return this;
    }
    /**
     * @description
     * Specify properties of GitHub context
     * (https://github.com/actions/toolkit/blob/main/packages/github/src/context.ts)
     * that will be mapped to corresponding env variables.
     * In an action it's normally accessible by `require('@actions/github').context`.
     *
     * Doesn't override `setEnv()` in options object, but will be merged with other service env variables at action run.
     *
     * If you set a `payload` property, at action run it will be serialized to a temp file, its path will be set to
     * `GITHUB_EVENT_PATH` env variable, so that `@actions/github` context can read it correctly.
     * @see GithubContextEnvsInterface
     */
    setGithubContext(context, update = true) {
        update ? this.githubContext.apply(context) : this.githubContext.setData(context);
        return this;
    }
    setOutputOptions(options, update = true) {
        update ? this.outputOptions.apply(options) : this.outputOptions.setData(options);
        return this;
    }
    /**
     * @description
     * `false`: do not set any default values<br>
     * `true` _(default)_: emulate GitHub runner environment as possible by faking GitHub service and context envs.<br>
     *
     * The following env variables will be set:
     *
     * | Env variable       | Value                                           |
     * |--------------------|-------------------------------------------------|
     * | GITHUB_WORKFLOW    | test_workflow                                   |
     * | GITHUB_RUN_ID      | _random number_                                 |
     * | GITHUB_RUN_NUMBER  | 1                                               |
     * | GITHUB_JOB         | test_job                                        |
     * | GITHUB_ACTION      | _name from `action.yml` file, if set in target_ |
     * | GITHUB_ACTOR       | tester                                          |
     * | GITHUB_EVENT_NAME  | workflow_dispatch                               |
     * | GITHUB_SERVER_URL  | https://github.com                              |
     * | GITHUB_API_URL     | https://api.github.com                          |
     * | GITHUB_GRAPHQL_URL | https://api.github.com/graphql                  |
     * | CI                 | true                                            |
     * | GITHUB_ACTIONS     | true                                            |
     * | RUNNER_NAME        | test-runner                                     |
     * | RUNNER_OS          | _os, taken from the host_                       |
     * | RUNNER_ARCH        | _arch, taken from the host_                     |
     *
     *  If set to `true`, it doesn't override env variables in options object, but will be merged at action run.
     *  Explicitly set variables will have higher priority during the merge.
     */
    setShouldFakeMinimalGithubRunnerEnv(doFake) {
        this.shouldFakeMinimalGithubRunnerEnv = doFake;
        return this;
    }
    /**
     * A separate method (for convenience) to set GitHub service env variables.
     * Doesn't override `setEnv()` in options object, but will be merged with other service env variables at action run.
     */
    setGithubServiceEnv(githubEnv, update = true) {
        update ? this.githubServiceEnv.apply(githubEnv) : this.githubServiceEnv.setData(githubEnv);
        return this;
    }
    /**
     * @description
     * Set a working dir path for an action. If you run Docker action, it should point to the path
     * inside container.
     *
     * Default:
     * - For JavaScript actions: working dir of a current process
     * - For Docker actions: `/github/workspace`
     */
    setWorkingDir(dirPath) {
        this.workingDir = dirPath;
        return this;
    }
    /**
     * @description
     * Set path of an existing dir to `GITHUB_WORKSPACE` env variable. If you run
     * a docker action, it will be mounted as volume to `/github/workspace` and `GITHUB_WORKSPACE` will
     * point to it.
     *
     * `undefined` _(default)_: create a temporary dir that will be deleted after run. To prevent
     * it from deleting, use `setFakeFsOptions({rmFakedWorkspaceDirAfterRun: false})`.
     */
    setWorkspaceDir(dirPath) {
        this.workspaceDir = dirPath;
        return this;
    }
    /**
     * @default
     * Set path of an existing dir to `RUNNER_TEMP` env variable. If you run
     * a docker action, it will be mounted as volume to `/home/runner/work/_temp` and `RUNNER_TEMP` will
     * point to it.
     *
     * `undefined` _(default)_: create a temporary dir that will be deleted after run. To prevent
     * it from deleting, use `setFakeFsOptions({rmFakedTempDirAfterRun: false})`.
     */
    setTempDir(dirPath) {
        this.tempDir = dirPath;
        return this;
    }
    /**
     * Set timeout in milliseconds for an action run.
     * It works differently depending on a target:
     * - Docker and JS file targets (`docker`, `jsFile`, `mainJsScript`, `preJsScript`, `postJsScript`): limits the
     *   maximum execution time interrupting a spawned process.
     * - Function targets (`syncFn`, `asyncFn`): doesn't limit an execution time, just sets `isTimedOut` property
     *   in a run result.
     *
     * If action exceeds the specified timeout, `isTimedOut` property of a run result will be set to `true`.
     */
    setTimeoutMs(timeoutMs) {
        this.timeoutMs = timeoutMs;
        return this;
    }
    validate() {
        return this;
    }
    clone() {
        return new RunOptions(this.inputs.clone(), this.env.clone(), this.state.clone(), this.githubContext.clone(), this.githubServiceEnv.clone(), this.fakeFsOptions.clone(), this.outputOptions.clone(), this.shouldAddProcessEnv, this.shouldFakeMinimalGithubRunnerEnv, this.workingDir, this.workspaceDir, this.tempDir, this.timeoutMs);
    }
}
exports.RunOptions = RunOptions;
//# sourceMappingURL=RunOptions.js.map