"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GithubContextStore = void 0;
const realistic_structured_clone_1 = __importDefault(require("realistic-structured-clone"));
const AbstractStore_1 = require("../utils/AbstractStore");
const collections_1 = require("../utils/collections");
class GithubContextStore extends AbstractStore_1.AbstractStore {
    fakeMinimalRunnerContext(action) {
        if (action !== undefined) {
            this._data.action = action;
        }
        this._data.workflow = GithubContextStore.WORKFLOW_DEFAULT;
        this._data.runId = Math.floor(Math.random() * 2147483646) + 1;
        this._data.runNumber = GithubContextStore.RUN_NUMBER_DEFAULT;
        this._data.job = GithubContextStore.JOB_DEFAULT;
        this._data.actor = GithubContextStore.ACTOR_DEFAULT;
        this._data.eventName = GithubContextStore.EVENT_NAME_DEFAULT;
        this._data.serverUrl = GithubContextStore.SERVER_URL_DEFAULT;
        this._data.apiUrl = GithubContextStore.API_URL_DEFAULT;
        this._data.graphqlUrl = GithubContextStore.GRAPHQL_URL_DEFAULT;
        return this;
    }
    toEnvVariables() {
        var _a, _b;
        return (0, collections_1.filterObjectKeys)({
            GITHUB_WORKFLOW: this._data.workflow,
            GITHUB_RUN_ID: (_a = this._data.runId) === null || _a === void 0 ? void 0 : _a.toString(),
            GITHUB_RUN_NUMBER: (_b = this._data.runNumber) === null || _b === void 0 ? void 0 : _b.toString(),
            GITHUB_JOB: this._data.job,
            GITHUB_ACTION: this._data.action,
            GITHUB_ACTOR: this._data.actor,
            GITHUB_REPOSITORY: this._data.repository,
            GITHUB_EVENT_NAME: this._data.eventName,
            GITHUB_SHA: this._data.sha,
            GITHUB_REF: this._data.ref,
            GITHUB_SERVER_URL: this._data.serverUrl,
            GITHUB_API_URL: this._data.apiUrl,
            GITHUB_GRAPHQL_URL: this._data.graphqlUrl,
        }, (key, value) => value !== undefined);
    }
    clone() {
        return new GithubContextStore(Object.assign(Object.assign({}, this._data), { payload: (0, realistic_structured_clone_1.default)(this._data.payload) }));
    }
}
exports.GithubContextStore = GithubContextStore;
GithubContextStore.WORKFLOW_DEFAULT = 'test_workflow';
GithubContextStore.RUN_NUMBER_DEFAULT = 1;
GithubContextStore.JOB_DEFAULT = 'test_job';
GithubContextStore.ACTOR_DEFAULT = 'tester';
GithubContextStore.EVENT_NAME_DEFAULT = 'workflow_dispatch';
GithubContextStore.SERVER_URL_DEFAULT = 'https://github.com';
GithubContextStore.API_URL_DEFAULT = 'https://api.github.com';
GithubContextStore.GRAPHQL_URL_DEFAULT = 'https://api.github.com/graphql';
//# sourceMappingURL=GithubContextStore.js.map