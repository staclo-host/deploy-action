import { GithubServiceFileName } from "./GithubServiceFileName";
import { FakeFile } from "./FakeFile";
import { ParsedFileCommandsInterface } from "../runResult/ParsedCommandsInterface";
import { WebhookPayload } from "@actions/github/lib/interfaces";
export declare class FakeFilesCollection {
    /**
     * Create collection and modify it in a callback. Clean up any added files in case of error
     */
    static safePrepare(callback: (collection: FakeFilesCollection) => any): FakeFilesCollection;
    files: Map<GithubServiceFileName, FakeFile>;
    createCommandFiles(tempDirPath?: string): this;
    createCommandFilesInDir(dirPath?: string): this;
    protected createCommandFilesImpl(dirPath: string | undefined, tempDirPath: string | undefined): this;
    createEventPayloadFile(payload: WebhookPayload, tempDirPath?: string, fileName?: string): this;
    createEventPayloadFileInDir(payload: WebhookPayload, dirPath?: string, fileName?: string): this;
    createEventPayloadFileImpl(payload: WebhookPayload, dirPath: string | undefined, tempDirPath: string | undefined, fileName: string | undefined): this;
    readFileCommands(eol: string): ParsedFileCommandsInterface;
    cleanUp(): void;
}
//# sourceMappingURL=FakeFilesCollection.d.ts.map