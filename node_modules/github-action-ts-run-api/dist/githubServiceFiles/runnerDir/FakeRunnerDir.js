"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FakeRunnerDir = exports.deleteAllFakedDirs = void 0;
const tmp_1 = __importDefault(require("tmp"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const globalExistingFakedDirs = new Set();
function deleteAllFakedDirs() {
    globalExistingFakedDirs.forEach(dir => dir.delete());
}
exports.deleteAllFakedDirs = deleteAllFakedDirs;
class FakeRunnerDir {
    static create(tmpDirPath) {
        return new FakeRunnerDir(tmp_1.default.dirSync({
            keep: true,
            tmpdir: tmpDirPath
        }).name, false);
    }
    constructor(dirPath, cleanedUp) {
        this.dirPath = dirPath;
        this.cleanedUp = cleanedUp;
        globalExistingFakedDirs.add(this);
    }
    delete() {
        if (!this.cleanedUp && fs_extra_1.default.existsSync(this.dirPath)) {
            // this._createdTmp.removeCallback() fails if dir is not empty
            fs_extra_1.default.removeSync(this.dirPath);
            this.cleanedUp = true;
        }
        globalExistingFakedDirs.delete(this);
    }
    get existingDirPath() {
        return !this.cleanedUp && fs_extra_1.default.existsSync(this.dirPath)
            ? this.dirPath
            : undefined;
    }
}
exports.FakeRunnerDir = FakeRunnerDir;
//# sourceMappingURL=FakeRunnerDir.js.map