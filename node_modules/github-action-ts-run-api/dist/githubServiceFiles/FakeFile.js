"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FakeFile = void 0;
const tmp_1 = __importDefault(require("tmp"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const crypto_1 = __importDefault(require("crypto"));
const path = __importStar(require("path"));
class FakeFile {
    static getFilePathEnvVariable(name) {
        return `GITHUB_${name}`;
    }
    static createInDir(name, dirPath, fileName) {
        if (fileName === undefined) {
            fileName = name + '_' + crypto_1.default.createHash('md5').update(dirPath + name).digest('hex');
        }
        const filePath = path.resolve(dirPath, fileName);
        fs_extra_1.default.closeSync(fs_extra_1.default.openSync(filePath, fs_extra_1.default.constants.O_CREAT | fs_extra_1.default.constants.O_EXCL | fs_extra_1.default.constants.O_RDWR));
        return new FakeFile(name, filePath);
    }
    static create(name, tempDirPath) {
        return new FakeFile(name, tmp_1.default.fileSync({
            prefix: name,
            keep: true,
            tmpdir: tempDirPath
        }).name);
    }
    constructor(name, filePath) {
        this.name = name;
        this.filePath = filePath;
    }
    get filePathEnvVariable() {
        return FakeFile.getFilePathEnvVariable(this.name);
    }
    delete() {
        if (fs_extra_1.default.existsSync(this.filePath)) {
            fs_extra_1.default.unlinkSync(this.filePath);
        }
    }
}
exports.FakeFile = FakeFile;
//# sourceMappingURL=FakeFile.js.map