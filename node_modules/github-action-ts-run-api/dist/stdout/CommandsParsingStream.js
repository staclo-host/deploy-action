"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandsParsingStream = void 0;
const stream_1 = require("stream");
const parseStdoutCommand_1 = require("./parseStdoutCommand");
const streamUtils_1 = require("../utils/streamUtils");
/**
 * emits commands objects
 * @see CommandInterface
 */
class CommandsParsingStream extends stream_1.Transform {
    constructor() {
        super({
            readableObjectMode: true,
            writableObjectMode: false,
            // For node < 14
            autoDestroy: true
        });
        this._unprocessedLine = '';
        this._isClosed = false;
        this.on('close', () => this._isClosed = true);
    }
    // noinspection JSUnusedGlobalSymbols
    get closed() {
        return this._isClosed;
    }
    waitUntilClosed() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._isClosed) {
                return;
            }
            return new Promise(resolve => this.on('close', resolve));
        });
    }
    _transform(chunk, encoding, callback) {
        chunk = (0, streamUtils_1.chunkToString)(chunk, encoding);
        this._unprocessedLine += chunk;
        const lines = this._unprocessedLine.split(/\r?\n/);
        if (lines.length > 1) {
            for (let i = 0; i < lines.length - 1; ++i) {
                if (lines[i]) {
                    const cmd = (0, parseStdoutCommand_1.parseStdoutCommand)(lines[i]);
                    if (cmd !== undefined) {
                        this.push(cmd);
                    }
                }
            }
            this._unprocessedLine = lines[lines.length - 1];
        }
        callback();
    }
}
exports.CommandsParsingStream = CommandsParsingStream;
//# sourceMappingURL=CommandsParsingStream.js.map