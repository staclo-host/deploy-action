"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsFileTarget = void 0;
const JsFileRunResult_1 = require("../runResult/JsFileRunResult");
const spawnChildProc_1 = require("./spawnChildProc");
const ActionConfigStore_1 = require("../../../runOptions/ActionConfigStore");
const ChildProcRunMilieuFactory_1 = require("../runMilieu/ChildProcRunMilieuFactory");
const os_1 = __importDefault(require("os"));
const spawnProc_1 = require("../../../utils/spawnProc");
const Duration_1 = require("../../../utils/Duration");
const ChildProcRunMilieuComponentsFactory_1 = require("../runMilieu/ChildProcRunMilieuComponentsFactory");
const assert_1 = __importDefault(require("assert"));
const path_1 = __importDefault(require("path"));
const OutputsCommandsCollector_1 = require("../../../stdout/OutputsCommandsCollector");
const WarningsCollector_1 = require("../../../runResult/warnings/WarningsCollector");
class JsFileTarget {
    // noinspection JSUnusedGlobalSymbols
    static createMain(actionConfigSource, filePathPrefix) {
        return JsFileTarget.createFromConfigRunsKey('main', actionConfigSource, filePathPrefix);
    }
    // noinspection JSUnusedGlobalSymbols
    static createPre(actionConfigSource, filePathPrefix) {
        return JsFileTarget.createFromConfigRunsKey('pre', actionConfigSource, filePathPrefix);
    }
    // noinspection JSUnusedGlobalSymbols
    static createPost(actionConfigSource, filePathPrefix) {
        return JsFileTarget.createFromConfigRunsKey('post', actionConfigSource, filePathPrefix);
    }
    // noinspection JSUnusedGlobalSymbols
    static createForFile(jsFilePath, actionConfigSource) {
        const actionConfig = ActionConfigStore_1.ActionConfigStore.create(actionConfigSource, false);
        return new JsFileTarget(jsFilePath, actionConfig, typeof actionConfigSource === 'string' ? actionConfigSource : undefined);
    }
    static createFromConfigRunsKey(scriptName, actionConfigSource, filePathPrefix) {
        const actionConfig = ActionConfigStore_1.ActionConfigStore.create(actionConfigSource, true);
        (0, assert_1.default)(actionConfig.data.runs.using.startsWith('node'), "Passed action config has 'runs' != node");
        let targetFilePath = actionConfig.data.runs[scriptName];
        (0, assert_1.default)(targetFilePath !== undefined, `Action config doesn't have "${scriptName}" key in "runs" section`);
        if (filePathPrefix === undefined) {
            (0, assert_1.default)(typeof actionConfigSource === 'string');
            filePathPrefix = path_1.default.dirname(actionConfigSource);
        }
        targetFilePath = path_1.default.resolve(filePathPrefix, targetFilePath);
        return new JsFileTarget(targetFilePath, actionConfig, typeof actionConfigSource === 'string' ? actionConfigSource : undefined);
    }
    constructor(jsFilePath, actionConfig, actionYmlPath) {
        this.jsFilePath = jsFilePath;
        this.actionConfig = actionConfig;
        this.actionYmlPath = actionYmlPath;
        this.isAsync = true;
    }
    run(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const warningsCollector = new WarningsCollector_1.WarningsCollector(options, this.actionConfig);
            const runMilieu = (new ChildProcRunMilieuFactory_1.ChildProcRunMilieuFactory(new ChildProcRunMilieuComponentsFactory_1.ChildProcRunMilieuComponentsFactory(options, this.actionConfig))).createMilieu(options.validate());
            const commandsCollector = new OutputsCommandsCollector_1.OutputsCommandsCollector(options.outputOptions.data.parseStdoutCommands, options.outputOptions.data.parseStderrCommands);
            const duration = Duration_1.Duration.startMeasuring();
            const spawnResult = yield (0, spawnChildProc_1.spawnChildProc)(this.jsFilePath, options, runMilieu.env, options.outputOptions.data.printStdout, options.outputOptions.stdoutTransform, options.outputOptions.data.printStderr, options.outputOptions.stderrTransform, commandsCollector);
            const durationMs = duration.measureMs();
            if ((spawnResult.stderr && !options.outputOptions.data.printStderr) || spawnResult.error) {
                spawnProc_1.SpawnProc.debugError(spawnResult);
            }
            if (options.outputOptions.data.printRunnerDebug) {
                process.stdout.write(`Process finished with status code = ${spawnResult.status}` + os_1.default.EOL);
            }
            try {
                const effects = runMilieu.getEffects(os_1.default.EOL);
                if (options.fakeFsOptions.data.fakeCommandFiles) {
                    commandsCollector.commandsStore.applyAndMerge(effects.fileCommands);
                }
                warningsCollector.setCommandWarnings(commandsCollector.commandWarnings);
                return new JsFileRunResult_1.JsFileRunResult(commandsCollector.commandsStore.data, spawnResult.error, spawnResult.status !== null ? spawnResult.status : undefined, spawnResult.stdout, spawnResult.stderr, durationMs, effects.runnerDirs.data.temp, effects.runnerDirs.data.workspace, warningsCollector.getAndPrint(), spawnResult);
            }
            finally {
                runMilieu.restore();
            }
        });
    }
    clone() {
        return new JsFileTarget(this.jsFilePath, this.actionConfig.clone(), this.actionYmlPath);
    }
}
exports.JsFileTarget = JsFileTarget;
//# sourceMappingURL=JsFileTarget.js.map