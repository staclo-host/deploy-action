import { RunOptions } from "../../../runOptions/RunOptions";
import { ActionConfigSource, ActionConfigStoreOptional } from "../../../runOptions/ActionConfigStore";
import { ActionConfigInterface } from "../../../types/ActionConfigInterface";
import { AsyncRunTargetInterface } from "../../../runTarget/AsyncRunTargetInterface";
import { JsFileRunResultInterface } from "../runResult/JsFileRunResultInterface";
type ScriptName = 'pre' | 'main' | 'post';
export declare class JsFileTarget implements AsyncRunTargetInterface {
    readonly jsFilePath: string;
    readonly actionConfig: ActionConfigStoreOptional;
    readonly actionYmlPath: string | undefined;
    static createMain(actionConfig: ActionConfigInterface, filePathPrefix: string): JsFileTarget;
    static createMain(actionYmlPath: string): JsFileTarget;
    static createPre(actionConfig: ActionConfigInterface, filePathPrefix: string): JsFileTarget;
    static createPre(actionYmlPath: string): JsFileTarget;
    static createPost(actionConfig: ActionConfigInterface, filePathPrefix: string): JsFileTarget;
    static createPost(actionYmlPath: string): JsFileTarget;
    static createForFile(jsFilePath: string, actionConfig?: ActionConfigInterface): JsFileTarget;
    static createForFile(jsFilePath: string, actionYmlPath?: string): JsFileTarget;
    protected static createFromConfigRunsKey(scriptName: ScriptName, actionConfigSource: ActionConfigSource, filePathPrefix?: string): JsFileTarget;
    isAsync: true;
    protected constructor(jsFilePath: string, actionConfig: ActionConfigStoreOptional, actionYmlPath: string | undefined);
    run(options: RunOptions): Promise<JsFileRunResultInterface>;
    clone(): this;
}
export {};
//# sourceMappingURL=JsFileTarget.d.ts.map