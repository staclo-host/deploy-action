"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FnRunMilieuFactory = void 0;
const RunMilieuFs_1 = require("../../../runMilieu/RunMilieuFs");
const FnRunMilieu_1 = require("./FnRunMilieu");
const saveProcessProps_1 = require("./saveProcessProps");
const StdoutInterceptor_1 = require("./StdoutInterceptor");
class FnRunMilieuFactory {
    constructor(componentsFactory) {
        this.componentsFactory = componentsFactory;
    }
    createMilieu(options) {
        const runnerFs = RunMilieuFs_1.RunMilieuFs.safePrepare((setFiles, setDirs) => {
            setDirs(this.componentsFactory.prepareRunnerDirs());
            setFiles(this.componentsFactory.prepareFiles());
        });
        try {
            const env = this.componentsFactory.prepareEnv(runnerFs.files, runnerFs.dirs);
            const restoreProcessProps = (0, saveProcessProps_1.saveProcessProps)();
            if (options.workingDir !== undefined) {
                process.chdir(options.workingDir);
            }
            const stdoutInterceptor = StdoutInterceptor_1.StdoutInterceptor.start(options.outputOptions.data.printStdout, options.outputOptions.stdoutTransform, options.outputOptions.data.printStderr, options.outputOptions.stderrTransform, options.outputOptions.data.parseStdoutCommands, options.outputOptions.data.parseStderrCommands);
            const fnRunMilieu = new FnRunMilieu_1.FnRunMilieu(runnerFs.files, runnerFs.dirs, env.data, options.fakeFsOptions.data, restoreProcessProps, stdoutInterceptor);
            process.env = fnRunMilieu.env;
            return fnRunMilieu;
        }
        catch (err) {
            runnerFs.cleanUp();
            throw err;
        }
    }
}
exports.FnRunMilieuFactory = FnRunMilieuFactory;
//# sourceMappingURL=FnRunMilieuFactory.js.map