"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StdoutInterceptor = void 0;
const intercept_stdout_1 = __importDefault(require("intercept-stdout"));
const OutputTransform_1 = require("../../../runOptions/OutputTransform");
const OutputsCommandsCollector_1 = require("../../../stdout/OutputsCommandsCollector");
class StdoutInterceptor {
    static start(printStdout, stdoutTransform, printStderr, stderrTransform, parseStdoutCommands = false, parseStderrCommands = false) {
        return new StdoutInterceptor(printStdout, stdoutTransform, printStderr, stderrTransform, intercept_stdout_1.default, parseStdoutCommands, parseStderrCommands);
    }
    constructor(printStdout, stdoutTransform, printStderr, stderrTransform, startInterceptFn, parseStdoutCommands, parseStderrCommands) {
        this._stdoutData = '';
        this._stderrData = '';
        this._printStdout = printStdout;
        this._stdoutTransformStream = (0, OutputTransform_1.getTransformStream)(stdoutTransform);
        this._printStderr = printStderr;
        this._stderrTransformStream = (0, OutputTransform_1.getTransformStream)(stderrTransform);
        this._unhook = startInterceptFn(this.onStdoutData.bind(this), this.onStderrData.bind(this));
        this._commandsCollector = new OutputsCommandsCollector_1.OutputsCommandsCollector(parseStdoutCommands, parseStderrCommands);
    }
    unHook() {
        // We use unHook() signal to
        // send the remaining data from this._stdoutTransformStream to stdout
        if (this._stdoutTransformStream) {
            this._stdoutTransformStream.end(() => {
                var _a;
                const ending = (_a = this._stdoutTransformStream) === null || _a === void 0 ? void 0 : _a.read();
                if (ending) {
                    process.stdout.write(ending);
                }
            });
        }
        // We use unHook() signal to
        // send the remaining data from this._stderrTransformStream to stdout
        if (this._stderrTransformStream) {
            this._stderrTransformStream.end(() => {
                var _a;
                const ending = (_a = this._stderrTransformStream) === null || _a === void 0 ? void 0 : _a.read();
                if (ending) {
                    process.stderr.write(ending);
                }
            });
        }
        this.finishCommandsParsing();
        this._unhook();
    }
    get interceptedStdout() {
        return this._stdoutData;
    }
    get interceptedStderr() {
        return this._stderrData;
    }
    finishCommandsParsing() {
        if (this._commandsCollector.stdoutParsingStream && !this._commandsCollector.stdoutParsingStream.closed) {
            this._commandsCollector.stdoutParsingStream.end();
            this._commandsCollector.stdoutParsingStream.destroy();
        }
        if (this._commandsCollector.stderrParsingStream && !this._commandsCollector.stderrParsingStream.closed) {
            this._commandsCollector.stderrParsingStream.end();
            this._commandsCollector.stderrParsingStream.destroy();
        }
    }
    get parsedCommands() {
        return this._commandsCollector.commandsStore;
    }
    get parserWarnings() {
        return this._commandsCollector.commandWarnings;
    }
    onStdoutData(str) {
        this._stdoutData += str;
        if (this._commandsCollector.stdoutParsingStream) {
            this._commandsCollector.stdoutParsingStream.write(str, () => { });
        }
        if (!this._printStdout) {
            return '';
        }
        if (this._stdoutTransformStream) {
            this._stdoutTransformStream.write(str, 'utf8');
            const sanitized = this._stdoutTransformStream.read();
            return sanitized ? sanitized.toString() : '';
        }
        return undefined;
    }
    onStderrData(str) {
        this._stderrData += str;
        if (this._commandsCollector.stderrParsingStream) {
            this._commandsCollector.stderrParsingStream.write(str, () => { });
        }
        if (!this._printStderr) {
            return '';
        }
        if (this._stderrTransformStream) {
            this._stderrTransformStream.write(str, 'utf8');
            const sanitized = this._stderrTransformStream.read();
            return sanitized ? sanitized.toString() : '';
        }
        return undefined;
    }
}
exports.StdoutInterceptor = StdoutInterceptor;
//# sourceMappingURL=StdoutInterceptor.js.map