"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyncFnTarget = void 0;
const AbstractFnTarget_1 = require("./AbstractFnTarget");
const FnRunResult_1 = require("../runResult/FnRunResult");
const runFn_1 = require("./runFn");
const ActionConfigStore_1 = require("../../../runOptions/ActionConfigStore");
const os_1 = __importDefault(require("os"));
const WarningsCollector_1 = require("../../../runResult/warnings/WarningsCollector");
class SyncFnTarget extends AbstractFnTarget_1.AbstractFnTarget {
    constructor() {
        super(...arguments);
        this.isAsync = false;
    }
    static create(fn, actionConfigSrc) {
        return new SyncFnTarget(fn, ActionConfigStore_1.ActionConfigStore.create(actionConfigSrc, false), typeof actionConfigSrc === 'string' ? actionConfigSrc : undefined);
    }
    run(options) {
        const runMilieu = this.createMilieu(options.validate());
        const { fnResult, error, timedOut, durationMs } = (0, runFn_1.runSyncFn)(this.fn, options.timeoutMs);
        const warningsCollector = (new WarningsCollector_1.WarningsCollector(options, this.actionConfig));
        try {
            const effects = runMilieu.getEffects();
            warningsCollector.setCommandWarnings(runMilieu.stdoutInterceptor.parserWarnings);
            if (options.outputOptions.data.printRunnerDebug) {
                process.stdout.write(`Finished with status code = ${effects.exitCode}` + os_1.default.EOL);
            }
            return new FnRunResult_1.FnRunResult(fnResult, error, durationMs, timedOut, effects, warningsCollector.get());
        }
        finally {
            runMilieu.restore();
            warningsCollector.print();
        }
    }
    clone() {
        return (new SyncFnTarget(this.fn, this.actionConfig.clone(), this.actionYmlPath));
    }
}
exports.SyncFnTarget = SyncFnTarget;
//# sourceMappingURL=SyncFnTarget.js.map