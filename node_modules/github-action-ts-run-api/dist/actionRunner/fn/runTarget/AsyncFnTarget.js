"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsyncFnTarget = void 0;
const AbstractFnTarget_1 = require("./AbstractFnTarget");
const FnRunResult_1 = require("../runResult/FnRunResult");
const runFn_1 = require("./runFn");
const ActionConfigStore_1 = require("../../../runOptions/ActionConfigStore");
const os_1 = __importDefault(require("os"));
const WarningsCollector_1 = require("../../../runResult/warnings/WarningsCollector");
class AsyncFnTarget extends AbstractFnTarget_1.AbstractFnTarget {
    constructor() {
        super(...arguments);
        this.isAsync = true;
    }
    static create(fn, actionConfigSrc) {
        return new AsyncFnTarget(fn, ActionConfigStore_1.ActionConfigStore.create(actionConfigSrc, false), typeof actionConfigSrc === 'string' ? actionConfigSrc : undefined);
    }
    run(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const runMilieu = this.createMilieu(options.validate());
            const { fnResult, error, timedOut, durationMs } = yield (0, runFn_1.runAsyncFn)(this.fn, options.timeoutMs);
            const warningsCollector = (new WarningsCollector_1.WarningsCollector(options, this.actionConfig))
                .setCommandWarnings(runMilieu.stdoutInterceptor.parserWarnings);
            try {
                const effects = runMilieu.getEffects();
                if (options.outputOptions.data.printRunnerDebug) {
                    process.stdout.write(`Finished with status code = ${effects.exitCode}` + os_1.default.EOL);
                }
                return new FnRunResult_1.FnRunResult(fnResult, error, durationMs, timedOut, effects, warningsCollector.get());
            }
            finally {
                runMilieu.restore();
                warningsCollector.print();
            }
        });
    }
    clone() {
        return (new AsyncFnTarget(this.fn, this.actionConfig.clone(), this.actionYmlPath));
    }
}
exports.AsyncFnTarget = AsyncFnTarget;
//# sourceMappingURL=AsyncFnTarget.js.map