"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DockerCli = void 0;
const child_process_1 = require("child_process");
const os_1 = __importDefault(require("os"));
const spawnAsync_1 = require("../../../utils/spawnAsync");
const path_1 = __importDefault(require("path"));
const OutputTransform_1 = require("../../../runOptions/OutputTransform");
function debugSpawnArgs(args) {
    const charsToEscape = /(["'$`\\])/g;
    process.stdout.write('docker ' +
        args.map(arg => arg.search(charsToEscape) != -1
            ? '"' + arg.replace(charsToEscape, '\\$1') + '"'
            : arg).join(' ') +
        os_1.default.EOL);
}
var DockerCli;
(function (DockerCli) {
    function isInstalled() {
        const spawnRes = (0, child_process_1.spawnSync)('docker', ['-v'], { encoding: 'utf8' });
        return spawnRes.status === 0 && spawnRes.error === undefined;
    }
    DockerCli.isInstalled = isInstalled;
    /**
     * @return {string} image id
     */
    function build(dockerFilePath, printDebug) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = ['build', '-q', '-f', dockerFilePath, path_1.default.dirname(dockerFilePath)];
            printDebug && debugSpawnArgs(args);
            const result = yield (0, spawnAsync_1.spawnAsync)('docker', args);
            if (printDebug && result.status == 0 && result.stdout) {
                process.stdout.write(result.stdout + os_1.default.EOL);
            }
            return result;
        });
    }
    DockerCli.build = build;
    function getRunSpawnArgs(options) {
        const args = ['run', '--rm'];
        if (options.user !== undefined) {
            args.push('--user', options.user);
        }
        if (options.name) {
            args.push('--name', options.name);
        }
        if (options.workdir) {
            args.push('--workdir', options.workdir);
        }
        Object.entries(options.volumes || {}).forEach(entry => {
            if (entry[1] !== undefined) {
                args.push('-v', `${entry[0]}:${entry[1]}`);
            }
        });
        Object.entries(options.env || {}).forEach(entry => {
            if (entry[1] !== undefined) {
                args.push('-e', `${entry[0]}=${entry[1]}`);
            }
        });
        if (options.network !== undefined) {
            args.push('--network', options.network);
        }
        args.push(options.imageId);
        options.args && args.push(...options.args);
        return args;
    }
    function runAndWait(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = getRunSpawnArgs(options);
            options.printDebug && debugSpawnArgs(args);
            return (0, spawnAsync_1.spawnAsync)('docker', args, {
                timeout: options.timeoutMs,
                printStdout: options.printStdout || false,
                stdoutTransform: options.stdoutTransform || OutputTransform_1.OutputTransform.NONE,
                printStderr: options.printStderr || false,
                onSpawn: options.onSpawn
            });
        });
    }
    DockerCli.runAndWait = runAndWait;
    function composeUp(dockerComposeYmlPath, options = [], printDebug) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = ['compose', '-f', dockerComposeYmlPath, ...options, 'up', '-d'];
            printDebug && debugSpawnArgs(args);
            return (0, spawnAsync_1.spawnAsync)('docker', args, { printStdout: printDebug, printStderr: printDebug });
        });
    }
    DockerCli.composeUp = composeUp;
    function composeDown(dockerComposeYmlPath, options = [], printDebug) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = ['compose', '-f', dockerComposeYmlPath, ...options, 'down'];
            printDebug && debugSpawnArgs(args);
            return (0, spawnAsync_1.spawnAsync)('docker', args, { printStdout: printDebug, printStderr: printDebug });
        });
    }
    DockerCli.composeDown = composeDown;
})(DockerCli = exports.DockerCli || (exports.DockerCli = {}));
//# sourceMappingURL=dockerCli.js.map