/// <reference types="node" />
import { ChildProcessWithoutNullStreams } from "child_process";
import { EnvInterface } from "../../../types/EnvInterface";
import { StringKeyValueObj } from "../../../types/StringKeyValueObj";
import { SpawnAsyncResult } from "../../../utils/spawnAsync";
import { OutputTransform } from "../../../runOptions/OutputTransform";
export declare namespace DockerCli {
    interface RunOptions {
        imageId: string;
        name?: string;
        env?: EnvInterface;
        volumes?: StringKeyValueObj;
        workdir?: string | undefined;
        user?: string;
        network?: string;
        args?: string[];
        timeoutMs?: number;
        printDebug?: boolean;
        printStdout?: boolean;
        stdoutTransform: OutputTransform;
        printStderr?: boolean;
        stderrTransform: OutputTransform;
        onSpawn?: (child: ChildProcessWithoutNullStreams) => void;
    }
    function isInstalled(): boolean;
    /**
     * @return {string} image id
     */
    function build(dockerFilePath: string, printDebug: boolean): Promise<SpawnAsyncResult>;
    function runAndWait(options: RunOptions): Promise<SpawnAsyncResult>;
    function composeUp(dockerComposeYmlPath: string, options: string[] | undefined, printDebug: boolean): Promise<SpawnAsyncResult>;
    function composeDown(dockerComposeYmlPath: string, options: string[] | undefined, printDebug: boolean): Promise<SpawnAsyncResult>;
}
//# sourceMappingURL=dockerCli.d.ts.map