import { ActionConfigStoreOptional } from "../../../runOptions/ActionConfigStore";
import { RunOptions } from "../../../runOptions/RunOptions";
import { DockerRunResult } from "../runResult/DockerRunResult";
import { InputContainerArg } from "./getContainerArgs";
import { DockerOptionsInterface } from "./DockerOptionsInterface";
import { AsyncRunTargetInterface } from "../../../runTarget/AsyncRunTargetInterface";
import { SpawnAsyncResult } from "../../../utils/spawnAsync";
import { DockerOptionsStore } from "./DockerOptionsStore";
import { ActionConfigInterface } from "../../../types/ActionConfigInterface";
export declare class DockerTarget implements AsyncRunTargetInterface {
    readonly actionConfig: ActionConfigStoreOptional;
    readonly actionYmlPath: string | undefined;
    private readonly containerArgs;
    private readonly dockerFilePath;
    private imageId;
    readonly dockerOptions: DockerOptionsStore;
    static readonly DEFAULT_WORKING_DIR = "/github/workspace";
    static createFromActionYml(actionYmlPath: string, dockerOptions?: Partial<DockerOptionsInterface>): DockerTarget;
    static createForDockerfile(dockerfilePath: string, actionConfig?: ActionConfigInterface, dockerOptions?: Partial<DockerOptionsInterface>): DockerTarget;
    static createForDockerfile(dockerfilePath: string, actionYmlPath?: string, dockerOptions?: Partial<DockerOptionsInterface>): DockerTarget;
    isAsync: true;
    protected constructor(actionConfig: ActionConfigStoreOptional, actionYmlPath: string | undefined, containerArgs: (InputContainerArg | string)[], dockerFilePath: string, imageId: string | undefined, dockerOptions: DockerOptionsStore);
    build(printDebug?: boolean): Promise<SpawnAsyncResult>;
    run(options: RunOptions): Promise<DockerRunResult>;
    clone(): this;
}
//# sourceMappingURL=DockerTarget.d.ts.map