"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withDockerCompose = void 0;
const dockerCli_1 = require("../runTarget/dockerCli");
const spawnProc_1 = require("../../../utils/spawnProc");
const os_1 = __importDefault(require("os"));
/**
 * @description
 * The wrapper that starts/stops a docker compose file around a callback.
 * Performs docker compose up, then runs `callback` function and after its promise fulfilled,
 * runs docker compose down.
 */
function withDockerCompose(dockerComposeYmlPath, callback, printDebug = true, composeOptions = []) {
    return __awaiter(this, void 0, void 0, function* () {
        const upResult = yield dockerCli_1.DockerCli.composeUp(dockerComposeYmlPath, composeOptions, printDebug);
        if (upResult.status !== 0 || upResult.error) {
            printDebug && spawnProc_1.SpawnProc.debugError(upResult);
            throw new Error('Error executing docker compose up.');
        }
        try {
            return yield callback();
        }
        finally {
            const downResult = yield dockerCli_1.DockerCli.composeDown(dockerComposeYmlPath, composeOptions, printDebug);
            if (downResult.status !== 0 || downResult.error) {
                printDebug && spawnProc_1.SpawnProc.debugError(downResult);
                process.stderr.write('Error executing docker compose down.' + os_1.default.EOL);
            }
        }
    });
}
exports.withDockerCompose = withDockerCompose;
//# sourceMappingURL=withDockerCompose.js.map