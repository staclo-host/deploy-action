"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WritableStreamBuffer = void 0;
const stream_1 = require("stream");
class WritableStreamBuffer extends stream_1.Writable {
    constructor(opts) {
        super(opts || {});
        this.opts = {};
        this._size = 0;
        this.opts = opts || {};
        this.initialSize = this.opts.initialSize || 8 * 1024;
        this.incrementAmount = this.opts.incrementAmount || 8 * 1024;
        this.buffer = Buffer.alloc(this.initialSize);
    }
    // noinspection JSUnusedGlobalSymbols
    size() {
        return this._size;
    }
    ;
    // noinspection JSUnusedGlobalSymbols
    maxSize() {
        return this.buffer.length;
    }
    ;
    // noinspection JSUnusedGlobalSymbols
    getContents(length) {
        if (!this._size)
            return false;
        const data = Buffer.alloc(Math.min(length || this._size, this._size));
        this.buffer.copy(data, 0, 0, data.length);
        if (data.length < this._size)
            this.buffer.copy(this.buffer, 0, data.length);
        this._size -= data.length;
        return data;
    }
    ;
    // noinspection JSUnusedGlobalSymbols
    getContentsAsString(encoding, length) {
        if (!this._size) {
            return false;
        }
        const data = this.buffer.toString(encoding || 'utf8', 0, Math.min(length || this._size, this._size));
        const dataLength = Buffer.byteLength(data);
        if (dataLength < this._size)
            this.buffer.copy(this.buffer, 0, dataLength);
        this._size -= dataLength;
        return data;
    }
    ;
    increaseBufferIfNecessary(incomingDataSize) {
        if ((this.buffer.length - this._size) < incomingDataSize) {
            const factor = Math.ceil((incomingDataSize - (this.buffer.length - this._size)) / this.incrementAmount);
            const newBuffer = Buffer.alloc(this.buffer.length + (this.incrementAmount * factor));
            this.buffer.copy(newBuffer, 0, 0, this._size);
            this.buffer = newBuffer;
        }
    }
    ;
    // noinspection JSUnusedGlobalSymbols
    _write(chunk, encoding, callback) {
        this.increaseBufferIfNecessary(chunk.length);
        chunk.copy(this.buffer, this._size, 0);
        this._size += chunk.length;
        callback();
    }
    ;
}
exports.WritableStreamBuffer = WritableStreamBuffer;
//# sourceMappingURL=WritableStreamBuffer.js.map