"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.spawnAsync = void 0;
const child_process_1 = require("child_process");
const WritableStreamBuffer_1 = require("./WritableStreamBuffer");
const Duration_1 = require("./Duration");
const OutputTransform_1 = require("../runOptions/OutputTransform");
function spawnAsync(command, args, options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const duration = Duration_1.Duration.startMeasuring();
        const child = (0, child_process_1.spawn)(command, args, {
            env: options.env,
            cwd: options.cwd
        });
        if (options.onSpawn) {
            options.onSpawn(child);
        }
        const spawnResult = {
            error: undefined,
            output: [],
            stdout: '',
            stderr: '',
            pid: child.pid || 0,
            status: null,
            signal: null,
            duration: 0,
            timedOut: false
        };
        const pipeOutput = (childOutput, processOutput, print, transformPrint) => {
            if (print) {
                const transformStream = (0, OutputTransform_1.getTransformStream)(transformPrint);
                const src = transformStream ? childOutput.pipe(transformStream) : childOutput;
                src.pipe(processOutput);
            }
            const buffer = new WritableStreamBuffer_1.WritableStreamBuffer();
            childOutput.pipe(buffer);
            return buffer;
        };
        const stdoutBuffer = pipeOutput(child.stdout, process.stdout, !!options.printStdout, options.stdoutTransform || OutputTransform_1.OutputTransform.NONE);
        const stderrBuffer = pipeOutput(child.stderr, process.stderr, !!options.printStderr, options.stderrTransform || OutputTransform_1.OutputTransform.NONE);
        return new Promise(resolve => {
            const killTimeout = options.timeout && setTimeout(() => {
                spawnResult.timedOut = true;
                if (child.kill() && child.killed) {
                    const error = new Error('Timed out');
                    error.code = 'ETIMEDOUT';
                    spawnResult.error = error;
                }
                resolveSpawn();
            }, options.timeout);
            const resolveSpawn = () => {
                killTimeout && clearTimeout(killTimeout);
                spawnResult.duration = duration.measureMs();
                spawnResult.stdout = stdoutBuffer.getContentsAsString() || '';
                spawnResult.stderr = stderrBuffer.getContentsAsString() || '';
                resolve(spawnResult);
            };
            child.once('error', err => {
                spawnResult.error = err;
                spawnResult.signal = child.signalCode;
                resolveSpawn();
            });
            child.once('close', (code, signal) => {
                spawnResult.signal = signal;
                spawnResult.status = code;
                resolveSpawn();
            });
        });
    });
}
exports.spawnAsync = spawnAsync;
//# sourceMappingURL=spawnAsync.js.map