/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import { ChildProcessWithoutNullStreams, SpawnSyncReturns } from "child_process";
import { URL } from "node:url";
import { OutputTransform } from "../runOptions/OutputTransform";
export interface SpawnAsyncOptions {
    timeout?: number;
    cwd?: string | URL | undefined;
    env?: NodeJS.ProcessEnv | undefined;
    /**
     * @default false
     */
    printStdout?: boolean;
    /**
     * Sets the way stdout will be transformed before printing (if printStdout == true)
     *
     * @default {OutputTransform.NONE}
     */
    stdoutTransform?: OutputTransform;
    /**
     * @default false
     */
    printStderr?: boolean;
    /**
     * Sets the way stderr will be transformed before printing (if printStderr == true)
     *
     * @default {OutputTransform.NONE}
     */
    stderrTransform?: OutputTransform;
    /**
     * Callback called after child process was spawned
     */
    onSpawn?: (child: ChildProcessWithoutNullStreams) => void;
}
export interface SpawnAsyncResult extends SpawnSyncReturns<string> {
    pid: number;
    stdout: string;
    stderr: string;
    status: number | null;
    signal: NodeJS.Signals | null;
    error?: Error | undefined;
    timedOut: boolean;
    duration: number;
}
export declare function spawnAsync(command: string, args: ReadonlyArray<string>, options?: SpawnAsyncOptions): Promise<SpawnAsyncResult>;
//# sourceMappingURL=spawnAsync.d.ts.map